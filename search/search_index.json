{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"API Reference Welcome to the Featureform API Reference! Additional Support If you've read the documentation and still have questions, more help is available here: Feedback Any thoughts about Featureform you'd like to share with us? Join our Slack community!","title":"API Reference"},{"location":"#api-reference","text":"","title":"API Reference"},{"location":"#welcome-to-the-featureform-api-reference","text":"","title":"Welcome to the Featureform API Reference!"},{"location":"#additional-support","text":"If you've read the documentation and still have questions, more help is available here:","title":"Additional Support"},{"location":"#feedback","text":"Any thoughts about Featureform you'd like to share with us? Join our Slack community!","title":"Feedback"},{"location":"client/","text":"Client These functions are used to registed new resources and retrieving existing resources. Retrieved resources can be used to register additional resources. If information on these resources is needed (e.g. retrieve the names of all variants of a feature), use the Resource Client instead. definitions.py import featureform as ff # e.g. registering a new provider redis = ff . register_redis ( name = \"redis-quickstart\" , host = \"quickstart-redis\" , # The internal dns name for redis port = 6379 , description = \"A Redis deployment we created for the Featureform quickstart\" ) Source code in src\\featureform\\register.pyclass Registrar : \"\"\"These functions are used to registed new resources and retrieving existing resources. Retrieved resources can be used to register additional resources. If information on these resources is needed (e.g. retrieve the names of all variants of a feature), use the [Resource Client](resource_client.md) instead. ``` py title=\"definitions.py\" import featureform as ff # e.g. registering a new provider redis = ff.register_redis( name=\"redis-quickstart\", host=\"quickstart-redis\", # The internal dns name for redis port=6379, description=\"A Redis deployment we created for the Featureform quickstart\" ) ``` \"\"\" def __init__ ( self ): self . __state = ResourceState () self . __resources = [] self . __default_owner = \"\" def register_user ( self , name : str ) -> UserRegistrar : \"\"\"Register a user. Args: name (str): User to be registered. Returns: UserRegistrar: User \"\"\" user = User ( name ) self . __resources . append ( user ) return UserRegistrar ( self , user ) def set_default_owner ( self , user : str ): \"\"\"Set default owner. Args: user (str): User to be set as default owner of resources. \"\"\" self . __default_owner = user def default_owner ( self ) -> str : return self . __default_owner def must_get_default_owner ( self ) -> str : owner = self . default_owner () if owner == \"\" : raise ValueError ( \"Owner must be set or a default owner must be specified.\" ) return owner def get_source ( self , name , variant ): \"\"\"Get a source. The returned object can be used to register additional resources. **Examples**: ``` py transactions = get_source(\"transactions\",\"kaggle\") transactions.register_resources( entity=user, entity_column=\"customerid\", labels=[ {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"}, ], ) ``` Args: name (str): Name of source to be retrieved variant (str): Name of variant of source to be retrieved Returns: source (ColumnSourceRegistrar): Source \"\"\" get = SourceReference ( name = name , variant = variant , obj = None ) self . __resources . append ( get ) fakeDefinition = PrimaryData ( location = SQLTable ( name = \"\" )) fakeSource = Source ( name = name , variant = variant , definition = fakeDefinition , owner = \"\" , provider = \"\" , description = \"\" ) return ColumnSourceRegistrar ( self , fakeSource ) def get_redis ( self , name ): \"\"\"Get a Redis provider. The returned object can be used to register additional resources. **Examples**: ``` py redis = get_redis(\"redis-quickstart\") // Defining a new transformation source with retrieved Redis provider average_user_transaction.register_resources( entity=user, entity_column=\"user_id\", inference_store=redis, features=[ {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"}, ], ) ``` Args: name (str): Name of Redis provider to be retrieved Returns: redis (OnlineProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"redis\" , obj = None ) self . __resources . append ( get ) fakeConfig = RedisConfig ( host = \"\" , port = 123 , password = \"\" , db = 123 ) fakeProvider = Provider ( name = name , function = \"ONLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OnlineProvider ( self , fakeProvider ) def get_postgres ( self , name ): \"\"\"Get a Postgres provider. The returned object can be used to register additional resources. **Examples**: ``` py postgres = get_postgres(\"postgres-quickstart\") transactions = postgres.register_table( name=\"transactions\", variant=\"kaggle\", description=\"Fraud Dataset From Kaggle\", table=\"Transactions\", # This is the table's name in Postgres ) ``` Args: name (str): Name of Postgres provider to be retrieved Returns: postgres (OfflineSQLProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"postgres\" , obj = None ) self . __resources . append ( get ) fakeConfig = PostgresConfig ( host = \"\" , port = \"\" , database = \"\" , user = \"\" , password = \"\" ) fakeProvider = Provider ( name = name , function = \"OFFLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OfflineSQLProvider ( self , fakeProvider ) def get_snowflake ( self , name ): \"\"\"Get a Snowflake provider. The returned object can be used to register additional resources. **Examples**: ``` py snowflake = get_snowflake(\"snowflake-quickstart\") transactions = snowflake.register_table( name=\"transactions\", variant=\"kaggle\", description=\"Fraud Dataset From Kaggle\", table=\"Transactions\", # This is the table's name in Postgres ) ``` Args: name (str): Name of Snowflake provider to be retrieved Returns: snowflake (OfflineSQLProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"snowflake\" , obj = None ) self . __resources . append ( get ) fakeConfig = SnowflakeConfig ( account = \"\" , database = \"\" , organization = \"\" , username = \"\" , password = \"\" , schema = \"\" ) fakeProvider = Provider ( name = name , function = \"OFFLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OfflineSQLProvider ( self , fakeProvider ) def get_entity ( self , name ): \"\"\"Get an entity. The returned object can be used to register additional resources. **Examples**: ``` py entity = get_entity(\"user\") transactions.register_resources( entity=entity, entity_column=\"customerid\", labels=[ {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"}, ], ) ``` Args: name (str): Name of entity to be retrieved Returns: entity (EntityRegistrar): Entity \"\"\" get = EntityReference ( name = name , obj = None ) fakeEntity = Entity ( name = name , description = \"\" ) self . __resources . append ( get ) return EntityRegistrar ( self , fakeEntity ) def register_redis ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 6379 , password : str = \"\" , db : int = 0 ): \"\"\"Register a Redis provider. **Examples**: ``` redis = ff.register_redis( name=\"redis-quickstart\", host=\"quickstart-redis\", # The internal dns name for redis port=6379, description=\"A Redis deployment we created for the Featureform quickstart\" ) ``` Args: name (str): Name of Redis provider to be registered description (str): Description of Redis provider to be registered team (str): Name of team host (str): Internal DNS name for Redis port (int): Redis port password (str): Redis password db (str): Redis database Returns: redis (OnlineProvider): Provider \"\"\" config = RedisConfig ( host = host , port = port , password = password , db = db ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) def register_firestore ( self , name : str , description : str = \"\" , team : str = \"\" , collection : str = \"\" , project_id : str = \"\" , credentials_path : str = \"\" ): config = FirestoreConfig ( collection = collection , project_id = project_id , credentials_path = credentials_path ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) def register_cassandra ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 9042 , username : str = \"cassandra\" , password : str = \"cassandra\" , keyspace : str = \"\" , consistency : str = \"THREE\" , replication : int = 3 ): config = CassandraConfig ( host = host , port = port , username = username , password = password , keyspace = keyspace , consistency = consistency , replication = replication ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) def register_dynamodb ( self , name : str , description : str = \"\" , team : str = \"\" , access_key : str = None , secret_key : str = None , region : str = None ): \"\"\"Register a DynamoDB provider. **Examples**: ``` dynamodb = ff.register_dynamodb( name=\"dynamodb-quickstart\", host=\"quickstart-dynamodb\", # The internal dns name for dynamodb description=\"A Dynamodb deployment we created for the Featureform quickstart\", access_key=\"$ACCESS_KEY\", secret_key=\"$SECRET_KEY\", region=\"us-east-1\" ) ``` Args: name (str): Name of DynamoDB provider to be registered description (str): Description of DynamoDB provider to be registered team (str): Name of team access_key (str): Access key secret_key (str): Secret key region (str): Region Returns: dynamodb (OnlineProvider): Provider \"\"\" config = DynamodbConfig ( access_key = access_key , secret_key = secret_key , region = region ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) def register_snowflake ( self , name : str , username : str , password : str , account : str , organization : str , database : str , schema : str = \"PUBLIC\" , description : str = \"\" , team : str = \"\" , ): \"\"\"Register a Snowflake provider. **Examples**: ``` snowflake = ff.register_snowflake( name=\"snowflake-quickstart\", username=\"snowflake\", password=\"password\", account=\"account\", database=\"snowflake\", schema=\"PUBLIC\", description=\"A Dynamodb deployment we created for the Featureform quickstart\" ) ``` Args: name (str): Name of Snowflake provider to be registered username (str): Username password (str): Password account (str): Account organization (str): Organization database (str): Database schema (str): Schema description (str): Description of Snowflake provider to be registered team (str): Name of team Returns: snowflake (OfflineSQLProvider): Provider \"\"\" config = SnowflakeConfig ( account = account , database = database , organization = organization , username = username , password = password , schema = schema ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider ) def register_postgres ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 5432 , user : str = \"postgres\" , password : str = \"password\" , database : str = \"postgres\" ): \"\"\"Register a Postgres provider. **Examples**: ``` postgres = ff.register_postgres( name=\"postgres-quickstart\", description=\"A Postgres deployment we created for the Featureform quickstart\", host=\"quickstart-postgres\", # The internal dns name for postgres port=\"5432\", user=\"postgres\", password=\"password\", database=\"postgres\" ) ``` Args: name (str): Name of Postgres provider to be registered description (str): Description of Postgres provider to be registered team (str): Name of team host (str): Internal DNS name of Postgres port (str): Port user (str): User password (str): Password database (str): Database Returns: postgres (OfflineSQLProvider): Provider \"\"\" config = PostgresConfig ( host = host , port = port , database = database , user = user , password = password ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider ) def register_redshift ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"\" , port : int = 5432 , user : str = \"redshift\" , password : str = \"password\" , database : str = \"dev\" ): \"\"\"Register a Redshift provider. **Examples**: ``` redshift = ff.register_redshift( name=\"redshift-quickstart\", description=\"A Redshift deployment we created for the Featureform quickstart\", host=\"quickstart-redshift\", # The internal dns name for postgres port=\"5432\", user=\"redshift\", password=\"password\", database=\"dev\" ) ``` Args: name (str): Name of Redshift provider to be registered description (str): Description of Redshift provider to be registered team (str): Name of team host (str): Internal DNS name of Redshift port (str): Port user (str): User password (str): Password database (str): Database Returns: redshift (OfflineSQLProvider): Provider \"\"\" config = RedshiftConfig ( host = host , port = port , database = database , user = user , password = password ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider ) def register_local ( self ): \"\"\"Register a Local provider. **Examples**: ``` local = register_local() ``` Returns: local (LocalProvider): Provider \"\"\" config = LocalConfig () provider = Provider ( name = \"local mode\" , function = \"ONLINE\" , description = \"This is local mode\" , team = \"team\" , config = config ) self . __resources . append ( provider ) return LocalProvider ( self , provider ) def register_primary_data ( self , name : str , variant : str , location : Location , provider : Union [ str , OfflineProvider ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" ): \"\"\"Register a primary data source. Args: name (str): Name of source variant (str): Name of variant location (Location): Location of primary data provider (Union[str, OfflineProvider]): Provider owner (Union[str, UserRegistrar]): Owner description (str): Description of primary data to be registered Returns: source (ColumnSourceRegistrar): Source \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () source = Source ( name = name , variant = variant , definition = PrimaryData ( location = location ), owner = owner , provider = provider , description = description ) self . __resources . append ( source ) return ColumnSourceRegistrar ( self , source ) def register_sql_transformation ( self , name : str , variant : str , query : str , provider : Union [ str , OfflineProvider ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , schedule : str = \"\" ): \"\"\"Register a SQL transformation source. Args: name (str): Name of source variant (str): Name of variant query (str): SQL query provider (Union[str, OfflineProvider]): Provider owner (Union[str, UserRegistrar]): Owner description (str): Description of primary data to be registered schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: source (ColumnSourceRegistrar): Source \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () source = Source ( name = name , variant = variant , definition = SQLTransformation ( query ), owner = owner , schedule = schedule , provider = provider , description = description , ) self . __resources . append ( source ) return ColumnSourceRegistrar ( self , source ) def sql_transformation ( self , variant : str , provider : Union [ str , OfflineProvider ], name : str = \"\" , schedule : str = \"\" , owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" ): \"\"\"SQL transformation decorator. Args: variant (str): Name of variant provider (Union[str, OfflineProvider]): Provider name (str): Name of source schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") owner (Union[str, UserRegistrar]): Owner description (str): Description of SQL transformation Returns: decorator (SQLTransformationDecorator): decorator \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () decorator = SQLTransformationDecorator ( registrar = self , name = name , variant = variant , provider = provider , schedule = schedule , owner = owner , description = description , ) self . __resources . append ( decorator ) return decorator def df_transformation ( self , variant : str , provider : Union [ str , OfflineProvider ], name : str = \"\" , owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , inputs : list = []): \"\"\"Dataframe transformation decorator. Args: variant (str): Name of variant provider (Union[str, OfflineProvider]): Provider name (str): Name of source owner (Union[str, UserRegistrar]): Owner description (str): Description of SQL transformation inputs (list): Inputs to transformation Returns: decorator (DFTransformationDecorator): decorator \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () decorator = DFTransformationDecorator ( registrar = self , name = name , variant = variant , provider = provider , owner = owner , description = description , inputs = inputs , ) self . __resources . append ( decorator ) return decorator def state ( self ): for resource in self . __resources : if isinstance ( resource , SQLTransformationDecorator ) or isinstance ( resource , DFTransformationDecorator ): resource = resource . to_source () self . __state . add ( resource ) self . __resources = [] return self . __state def register_entity ( self , name : str , description : str = \"\" ): \"\"\"Register an entity. Args: name (str): Name of entity to be registered description (str): Description of entity to be registered Returns: entity (EntityRegistrar): Entity \"\"\" entity = Entity ( name = name , description = description ) self . __resources . append ( entity ) return EntityRegistrar ( self , entity ) def register_column_resources ( self , source : Union [ NameVariant , SourceRegistrar , SQLTransformationDecorator ], entity : Union [ str , EntityRegistrar ], entity_column : str , owner : Union [ str , UserRegistrar ] = \"\" , inference_store : Union [ str , OnlineProvider ] = \"\" , features : List [ ColumnMapping ] = None , labels : List [ ColumnMapping ] = None , timestamp_column : str = \"\" , description : str = \"\" , schedule : str = \"\" , ): \"\"\"Create features and labels from a source. Used in the register_resources function. Args: source (Union[NameVariant, SourceRegistrar, SQLTransformationDecorator]): Source of features, labels, entity entity (Union[str, EntityRegistrar]): Entity entity_column (str): Column of entity in source owner (Union[str, UserRegistrar]): Owner inference_store (Union[str, OnlineProvider]): Online provider features (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) labels (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) description (str): Description schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: resource (ResourceRegistrar): resource \"\"\" if features is None : features = [] if labels is None : labels = [] if len ( features ) == 0 and len ( labels ) == 0 : raise ValueError ( \"No features or labels set\" ) if not isinstance ( source , tuple ): source = source . id () if not isinstance ( entity , str ): entity = entity . name () if not isinstance ( inference_store , str ): inference_store = inference_store . name () if len ( features ) > 0 and inference_store == \"\" : raise ValueError ( \"Inference store must be set when defining features\" ) if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () feature_resources = [] label_resources = [] for feature in features : resource = Feature ( name = feature [ \"name\" ], variant = feature [ \"variant\" ], source = source , value_type = feature [ \"type\" ], entity = entity , owner = owner , provider = inference_store , description = description , schedule = schedule , location = ResourceColumnMapping ( entity = entity_column , value = feature [ \"column\" ], timestamp = timestamp_column , ), ) self . __resources . append ( resource ) feature_resources . append ( resource ) for label in labels : resource = Label ( name = label [ \"name\" ], variant = label [ \"variant\" ], source = source , value_type = label [ \"type\" ], entity = entity , owner = owner , provider = inference_store , description = description , location = ResourceColumnMapping ( entity = entity_column , value = label [ \"column\" ], timestamp = timestamp_column , ), ) self . __resources . append ( resource ) label_resources . append ( resource ) return ResourceRegistrar ( self , features , labels ) def register_training_set ( self , name : str , variant : str , label : NameVariant , features : List [ NameVariant ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , schedule : str = \"\" ): \"\"\"Register a training set. Args: name (str): Name of training set to be registered variant (str): Name of variant to be registered label (NameVariant): Label of training set features (List[NameVariant]): Features of training set owner (Union[str, UserRegistrar]): Owner description (str): Description of training set to be registered schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: resource (ResourceRegistrar): resource \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () resource = TrainingSet ( name = name , variant = variant , description = description , owner = owner , schedule = schedule , label = label , features = features , ) self . __resources . append ( resource ) df_transformation ( variant , provider , name = '' , owner = '' , description = '' , inputs = []) Dataframe transformation decorator. Parameters: Name Type Description Default variant str Name of variant required provider Union [ str , OfflineProvider ] Provider required name str Name of source '' owner Union [ str , UserRegistrar ] Owner '' description str Description of SQL transformation '' inputs list Inputs to transformation [] Returns: Name Type Description decorator DFTransformationDecorator decorator Source code in src\\featureform\\register.py 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 def df_transformation ( self , variant : str , provider : Union [ str , OfflineProvider ], name : str = \"\" , owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , inputs : list = []): \"\"\"Dataframe transformation decorator. Args: variant (str): Name of variant provider (Union[str, OfflineProvider]): Provider name (str): Name of source owner (Union[str, UserRegistrar]): Owner description (str): Description of SQL transformation inputs (list): Inputs to transformation Returns: decorator (DFTransformationDecorator): decorator \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () decorator = DFTransformationDecorator ( registrar = self , name = name , variant = variant , provider = provider , owner = owner , description = description , inputs = inputs , ) self . __resources . append ( decorator ) return decorator get_entity ( name ) Get an entity. The returned object can be used to register additional resources. Examples : entity = get_entity ( \"user\" ) transactions . register_resources ( entity = entity , entity_column = \"customerid\" , labels = [ { \"name\" : \"fraudulent\" , \"variant\" : \"quickstart\" , \"column\" : \"isfraud\" , \"type\" : \"bool\" }, ], ) Parameters: Name Type Description Default name str Name of entity to be retrieved required Returns: Name Type Description entity EntityRegistrar Entity Source code in src\\featureform\\register.py 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 def get_entity ( self , name ): \"\"\"Get an entity. The returned object can be used to register additional resources. **Examples**: ``` py entity = get_entity(\"user\") transactions.register_resources( entity=entity, entity_column=\"customerid\", labels=[ {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"}, ], ) ``` Args: name (str): Name of entity to be retrieved Returns: entity (EntityRegistrar): Entity \"\"\" get = EntityReference ( name = name , obj = None ) fakeEntity = Entity ( name = name , description = \"\" ) self . __resources . append ( get ) return EntityRegistrar ( self , fakeEntity ) get_postgres ( name ) Get a Postgres provider. The returned object can be used to register additional resources. Examples : postgres = get_postgres ( \"postgres-quickstart\" ) transactions = postgres . register_table ( name = \"transactions\" , variant = \"kaggle\" , description = \"Fraud Dataset From Kaggle\" , table = \"Transactions\" , # This is the table's name in Postgres ) Parameters: Name Type Description Default name str Name of Postgres provider to be retrieved required Returns: Name Type Description postgres OfflineSQLProvider Provider Source code in src\\featureform\\register.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 def get_postgres ( self , name ): \"\"\"Get a Postgres provider. The returned object can be used to register additional resources. **Examples**: ``` py postgres = get_postgres(\"postgres-quickstart\") transactions = postgres.register_table( name=\"transactions\", variant=\"kaggle\", description=\"Fraud Dataset From Kaggle\", table=\"Transactions\", # This is the table's name in Postgres ) ``` Args: name (str): Name of Postgres provider to be retrieved Returns: postgres (OfflineSQLProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"postgres\" , obj = None ) self . __resources . append ( get ) fakeConfig = PostgresConfig ( host = \"\" , port = \"\" , database = \"\" , user = \"\" , password = \"\" ) fakeProvider = Provider ( name = name , function = \"OFFLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OfflineSQLProvider ( self , fakeProvider ) get_redis ( name ) Get a Redis provider. The returned object can be used to register additional resources. Examples : redis = get_redis ( \"redis-quickstart\" ) // Defining a new transformation source with retrieved Redis provider average_user_transaction . register_resources ( entity = user , entity_column = \"user_id\" , inference_store = redis , features = [ { \"name\" : \"avg_transactions\" , \"variant\" : \"quickstart\" , \"column\" : \"avg_transaction_amt\" , \"type\" : \"float32\" }, ], ) Parameters: Name Type Description Default name str Name of Redis provider to be retrieved required Returns: Name Type Description redis OnlineProvider Provider Source code in src\\featureform\\register.py 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 def get_redis ( self , name ): \"\"\"Get a Redis provider. The returned object can be used to register additional resources. **Examples**: ``` py redis = get_redis(\"redis-quickstart\") // Defining a new transformation source with retrieved Redis provider average_user_transaction.register_resources( entity=user, entity_column=\"user_id\", inference_store=redis, features=[ {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"}, ], ) ``` Args: name (str): Name of Redis provider to be retrieved Returns: redis (OnlineProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"redis\" , obj = None ) self . __resources . append ( get ) fakeConfig = RedisConfig ( host = \"\" , port = 123 , password = \"\" , db = 123 ) fakeProvider = Provider ( name = name , function = \"ONLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OnlineProvider ( self , fakeProvider ) get_snowflake ( name ) Get a Snowflake provider. The returned object can be used to register additional resources. Examples : snowflake = get_snowflake ( \"snowflake-quickstart\" ) transactions = snowflake . register_table ( name = \"transactions\" , variant = \"kaggle\" , description = \"Fraud Dataset From Kaggle\" , table = \"Transactions\" , # This is the table's name in Postgres ) Parameters: Name Type Description Default name str Name of Snowflake provider to be retrieved required Returns: Name Type Description snowflake OfflineSQLProvider Provider Source code in src\\featureform\\register.py 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 def get_snowflake ( self , name ): \"\"\"Get a Snowflake provider. The returned object can be used to register additional resources. **Examples**: ``` py snowflake = get_snowflake(\"snowflake-quickstart\") transactions = snowflake.register_table( name=\"transactions\", variant=\"kaggle\", description=\"Fraud Dataset From Kaggle\", table=\"Transactions\", # This is the table's name in Postgres ) ``` Args: name (str): Name of Snowflake provider to be retrieved Returns: snowflake (OfflineSQLProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"snowflake\" , obj = None ) self . __resources . append ( get ) fakeConfig = SnowflakeConfig ( account = \"\" , database = \"\" , organization = \"\" , username = \"\" , password = \"\" , schema = \"\" ) fakeProvider = Provider ( name = name , function = \"OFFLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OfflineSQLProvider ( self , fakeProvider ) get_source ( name , variant ) Get a source. The returned object can be used to register additional resources. Examples : transactions = get_source ( \"transactions\" , \"kaggle\" ) transactions . register_resources ( entity = user , entity_column = \"customerid\" , labels = [ { \"name\" : \"fraudulent\" , \"variant\" : \"quickstart\" , \"column\" : \"isfraud\" , \"type\" : \"bool\" }, ], ) Parameters: Name Type Description Default name str Name of source to be retrieved required variant str Name of variant of source to be retrieved required Returns: Name Type Description source ColumnSourceRegistrar Source Source code in src\\featureform\\register.py 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 def get_source ( self , name , variant ): \"\"\"Get a source. The returned object can be used to register additional resources. **Examples**: ``` py transactions = get_source(\"transactions\",\"kaggle\") transactions.register_resources( entity=user, entity_column=\"customerid\", labels=[ {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"}, ], ) ``` Args: name (str): Name of source to be retrieved variant (str): Name of variant of source to be retrieved Returns: source (ColumnSourceRegistrar): Source \"\"\" get = SourceReference ( name = name , variant = variant , obj = None ) self . __resources . append ( get ) fakeDefinition = PrimaryData ( location = SQLTable ( name = \"\" )) fakeSource = Source ( name = name , variant = variant , definition = fakeDefinition , owner = \"\" , provider = \"\" , description = \"\" ) return ColumnSourceRegistrar ( self , fakeSource ) register_column_resources ( source , entity , entity_column , owner = '' , inference_store = '' , features = None , labels = None , timestamp_column = '' , description = '' , schedule = '' ) Create features and labels from a source. Used in the register_resources function. Parameters: Name Type Description Default source Union [ NameVariant , SourceRegistrar , SQLTransformationDecorator ] Source of features, labels, entity required entity Union [ str , EntityRegistrar ] Entity required entity_column str Column of entity in source required owner Union [ str , UserRegistrar ] Owner '' inference_store Union [ str , OnlineProvider ] Online provider '' features List [ ColumnMapping ] List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) None labels List [ ColumnMapping ] List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) None description str Description '' schedule str Kubernetes CronJob schedule string (\" * * *\") '' Returns: Name Type Description resource ResourceRegistrar resource Source code in src\\featureform\\register.py 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 def register_column_resources ( self , source : Union [ NameVariant , SourceRegistrar , SQLTransformationDecorator ], entity : Union [ str , EntityRegistrar ], entity_column : str , owner : Union [ str , UserRegistrar ] = \"\" , inference_store : Union [ str , OnlineProvider ] = \"\" , features : List [ ColumnMapping ] = None , labels : List [ ColumnMapping ] = None , timestamp_column : str = \"\" , description : str = \"\" , schedule : str = \"\" , ): \"\"\"Create features and labels from a source. Used in the register_resources function. Args: source (Union[NameVariant, SourceRegistrar, SQLTransformationDecorator]): Source of features, labels, entity entity (Union[str, EntityRegistrar]): Entity entity_column (str): Column of entity in source owner (Union[str, UserRegistrar]): Owner inference_store (Union[str, OnlineProvider]): Online provider features (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) labels (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) description (str): Description schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: resource (ResourceRegistrar): resource \"\"\" if features is None : features = [] if labels is None : labels = [] if len ( features ) == 0 and len ( labels ) == 0 : raise ValueError ( \"No features or labels set\" ) if not isinstance ( source , tuple ): source = source . id () if not isinstance ( entity , str ): entity = entity . name () if not isinstance ( inference_store , str ): inference_store = inference_store . name () if len ( features ) > 0 and inference_store == \"\" : raise ValueError ( \"Inference store must be set when defining features\" ) if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () feature_resources = [] label_resources = [] for feature in features : resource = Feature ( name = feature [ \"name\" ], variant = feature [ \"variant\" ], source = source , value_type = feature [ \"type\" ], entity = entity , owner = owner , provider = inference_store , description = description , schedule = schedule , location = ResourceColumnMapping ( entity = entity_column , value = feature [ \"column\" ], timestamp = timestamp_column , ), ) self . __resources . append ( resource ) feature_resources . append ( resource ) for label in labels : resource = Label ( name = label [ \"name\" ], variant = label [ \"variant\" ], source = source , value_type = label [ \"type\" ], entity = entity , owner = owner , provider = inference_store , description = description , location = ResourceColumnMapping ( entity = entity_column , value = label [ \"column\" ], timestamp = timestamp_column , ), ) self . __resources . append ( resource ) label_resources . append ( resource ) return ResourceRegistrar ( self , features , labels ) register_dynamodb ( name , description = '' , team = '' , access_key = None , secret_key = None , region = None ) Register a DynamoDB provider. Examples : dynamodb = ff.register_dynamodb( name=\"dynamodb-quickstart\", host=\"quickstart-dynamodb\", # The internal dns name for dynamodb description=\"A Dynamodb deployment we created for the Featureform quickstart\", access_key=\"$ACCESS_KEY\", secret_key=\"$SECRET_KEY\", region=\"us-east-1\" ) Parameters: Name Type Description Default name str Name of DynamoDB provider to be registered required description str Description of DynamoDB provider to be registered '' team str Name of team '' access_key str Access key None secret_key str Secret key None region str Region None Returns: Name Type Description dynamodb OnlineProvider Provider Source code in src\\featureform\\register.py 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 def register_dynamodb ( self , name : str , description : str = \"\" , team : str = \"\" , access_key : str = None , secret_key : str = None , region : str = None ): \"\"\"Register a DynamoDB provider. **Examples**: ``` dynamodb = ff.register_dynamodb( name=\"dynamodb-quickstart\", host=\"quickstart-dynamodb\", # The internal dns name for dynamodb description=\"A Dynamodb deployment we created for the Featureform quickstart\", access_key=\"$ACCESS_KEY\", secret_key=\"$SECRET_KEY\", region=\"us-east-1\" ) ``` Args: name (str): Name of DynamoDB provider to be registered description (str): Description of DynamoDB provider to be registered team (str): Name of team access_key (str): Access key secret_key (str): Secret key region (str): Region Returns: dynamodb (OnlineProvider): Provider \"\"\" config = DynamodbConfig ( access_key = access_key , secret_key = secret_key , region = region ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) register_entity ( name , description = '' ) Register an entity. Parameters: Name Type Description Default name str Name of entity to be registered required description str Description of entity to be registered '' Returns: Name Type Description entity EntityRegistrar Entity Source code in src\\featureform\\register.py 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 def register_entity ( self , name : str , description : str = \"\" ): \"\"\"Register an entity. Args: name (str): Name of entity to be registered description (str): Description of entity to be registered Returns: entity (EntityRegistrar): Entity \"\"\" entity = Entity ( name = name , description = description ) self . __resources . append ( entity ) return EntityRegistrar ( self , entity ) register_local () Register a Local provider. Examples : local = register_local() Returns: Name Type Description local LocalProvider Provider Source code in src\\featureform\\register.py 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 def register_local ( self ): \"\"\"Register a Local provider. **Examples**: ``` local = register_local() ``` Returns: local (LocalProvider): Provider \"\"\" config = LocalConfig () provider = Provider ( name = \"local mode\" , function = \"ONLINE\" , description = \"This is local mode\" , team = \"team\" , config = config ) self . __resources . append ( provider ) return LocalProvider ( self , provider ) register_postgres ( name , description = '' , team = '' , host = '0.0.0.0' , port = 5432 , user = 'postgres' , password = 'password' , database = 'postgres' ) Register a Postgres provider. Examples : postgres = ff.register_postgres( name=\"postgres-quickstart\", description=\"A Postgres deployment we created for the Featureform quickstart\", host=\"quickstart-postgres\", # The internal dns name for postgres port=\"5432\", user=\"postgres\", password=\"password\", database=\"postgres\" ) Parameters: Name Type Description Default name str Name of Postgres provider to be registered required description str Description of Postgres provider to be registered '' team str Name of team '' host str Internal DNS name of Postgres '0.0.0.0' port str Port 5432 user str User 'postgres' password str Password 'password' database str Database 'postgres' Returns: Name Type Description postgres OfflineSQLProvider Provider Source code in src\\featureform\\register.py 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 def register_postgres ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 5432 , user : str = \"postgres\" , password : str = \"password\" , database : str = \"postgres\" ): \"\"\"Register a Postgres provider. **Examples**: ``` postgres = ff.register_postgres( name=\"postgres-quickstart\", description=\"A Postgres deployment we created for the Featureform quickstart\", host=\"quickstart-postgres\", # The internal dns name for postgres port=\"5432\", user=\"postgres\", password=\"password\", database=\"postgres\" ) ``` Args: name (str): Name of Postgres provider to be registered description (str): Description of Postgres provider to be registered team (str): Name of team host (str): Internal DNS name of Postgres port (str): Port user (str): User password (str): Password database (str): Database Returns: postgres (OfflineSQLProvider): Provider \"\"\" config = PostgresConfig ( host = host , port = port , database = database , user = user , password = password ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider ) register_primary_data ( name , variant , location , provider , owner = '' , description = '' ) Register a primary data source. Parameters: Name Type Description Default name str Name of source required variant str Name of variant required location Location Location of primary data required provider Union [ str , OfflineProvider ] Provider required owner Union [ str , UserRegistrar ] Owner '' description str Description of primary data to be registered '' Returns: Name Type Description source ColumnSourceRegistrar Source Source code in src\\featureform\\register.py 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 def register_primary_data ( self , name : str , variant : str , location : Location , provider : Union [ str , OfflineProvider ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" ): \"\"\"Register a primary data source. Args: name (str): Name of source variant (str): Name of variant location (Location): Location of primary data provider (Union[str, OfflineProvider]): Provider owner (Union[str, UserRegistrar]): Owner description (str): Description of primary data to be registered Returns: source (ColumnSourceRegistrar): Source \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () source = Source ( name = name , variant = variant , definition = PrimaryData ( location = location ), owner = owner , provider = provider , description = description ) self . __resources . append ( source ) return ColumnSourceRegistrar ( self , source ) register_redis ( name , description = '' , team = '' , host = '0.0.0.0' , port = 6379 , password = '' , db = 0 ) Register a Redis provider. Examples : redis = ff.register_redis( name=\"redis-quickstart\", host=\"quickstart-redis\", # The internal dns name for redis port=6379, description=\"A Redis deployment we created for the Featureform quickstart\" ) Parameters: Name Type Description Default name str Name of Redis provider to be registered required description str Description of Redis provider to be registered '' team str Name of team '' host str Internal DNS name for Redis '0.0.0.0' port int Redis port 6379 password str Redis password '' db str Redis database 0 Returns: Name Type Description redis OnlineProvider Provider Source code in src\\featureform\\register.py 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 def register_redis ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 6379 , password : str = \"\" , db : int = 0 ): \"\"\"Register a Redis provider. **Examples**: ``` redis = ff.register_redis( name=\"redis-quickstart\", host=\"quickstart-redis\", # The internal dns name for redis port=6379, description=\"A Redis deployment we created for the Featureform quickstart\" ) ``` Args: name (str): Name of Redis provider to be registered description (str): Description of Redis provider to be registered team (str): Name of team host (str): Internal DNS name for Redis port (int): Redis port password (str): Redis password db (str): Redis database Returns: redis (OnlineProvider): Provider \"\"\" config = RedisConfig ( host = host , port = port , password = password , db = db ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) register_redshift ( name , description = '' , team = '' , host = '' , port = 5432 , user = 'redshift' , password = 'password' , database = 'dev' ) Register a Redshift provider. Examples : redshift = ff.register_redshift( name=\"redshift-quickstart\", description=\"A Redshift deployment we created for the Featureform quickstart\", host=\"quickstart-redshift\", # The internal dns name for postgres port=\"5432\", user=\"redshift\", password=\"password\", database=\"dev\" ) Parameters: Name Type Description Default name str Name of Redshift provider to be registered required description str Description of Redshift provider to be registered '' team str Name of team '' host str Internal DNS name of Redshift '' port str Port 5432 user str User 'redshift' password str Password 'password' database str Database 'dev' Returns: Name Type Description redshift OfflineSQLProvider Provider Source code in src\\featureform\\register.py 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 def register_redshift ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"\" , port : int = 5432 , user : str = \"redshift\" , password : str = \"password\" , database : str = \"dev\" ): \"\"\"Register a Redshift provider. **Examples**: ``` redshift = ff.register_redshift( name=\"redshift-quickstart\", description=\"A Redshift deployment we created for the Featureform quickstart\", host=\"quickstart-redshift\", # The internal dns name for postgres port=\"5432\", user=\"redshift\", password=\"password\", database=\"dev\" ) ``` Args: name (str): Name of Redshift provider to be registered description (str): Description of Redshift provider to be registered team (str): Name of team host (str): Internal DNS name of Redshift port (str): Port user (str): User password (str): Password database (str): Database Returns: redshift (OfflineSQLProvider): Provider \"\"\" config = RedshiftConfig ( host = host , port = port , database = database , user = user , password = password ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider ) register_snowflake ( name , username , password , account , organization , database , schema = 'PUBLIC' , description = '' , team = '' ) Register a Snowflake provider. Examples : snowflake = ff.register_snowflake( name=\"snowflake-quickstart\", username=\"snowflake\", password=\"password\", account=\"account\", database=\"snowflake\", schema=\"PUBLIC\", description=\"A Dynamodb deployment we created for the Featureform quickstart\" ) Parameters: Name Type Description Default name str Name of Snowflake provider to be registered required username str Username required password str Password required account str Account required organization str Organization required database str Database required schema str Schema 'PUBLIC' description str Description of Snowflake provider to be registered '' team str Name of team '' Returns: Name Type Description snowflake OfflineSQLProvider Provider Source code in src\\featureform\\register.py 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 def register_snowflake ( self , name : str , username : str , password : str , account : str , organization : str , database : str , schema : str = \"PUBLIC\" , description : str = \"\" , team : str = \"\" , ): \"\"\"Register a Snowflake provider. **Examples**: ``` snowflake = ff.register_snowflake( name=\"snowflake-quickstart\", username=\"snowflake\", password=\"password\", account=\"account\", database=\"snowflake\", schema=\"PUBLIC\", description=\"A Dynamodb deployment we created for the Featureform quickstart\" ) ``` Args: name (str): Name of Snowflake provider to be registered username (str): Username password (str): Password account (str): Account organization (str): Organization database (str): Database schema (str): Schema description (str): Description of Snowflake provider to be registered team (str): Name of team Returns: snowflake (OfflineSQLProvider): Provider \"\"\" config = SnowflakeConfig ( account = account , database = database , organization = organization , username = username , password = password , schema = schema ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider ) register_sql_transformation ( name , variant , query , provider , owner = '' , description = '' , schedule = '' ) Register a SQL transformation source. Parameters: Name Type Description Default name str Name of source required variant str Name of variant required query str SQL query required provider Union [ str , OfflineProvider ] Provider required owner Union [ str , UserRegistrar ] Owner '' description str Description of primary data to be registered '' schedule str Kubernetes CronJob schedule string (\" * * *\") '' Returns: Name Type Description source ColumnSourceRegistrar Source Source code in src\\featureform\\register.py 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 def register_sql_transformation ( self , name : str , variant : str , query : str , provider : Union [ str , OfflineProvider ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , schedule : str = \"\" ): \"\"\"Register a SQL transformation source. Args: name (str): Name of source variant (str): Name of variant query (str): SQL query provider (Union[str, OfflineProvider]): Provider owner (Union[str, UserRegistrar]): Owner description (str): Description of primary data to be registered schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: source (ColumnSourceRegistrar): Source \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () source = Source ( name = name , variant = variant , definition = SQLTransformation ( query ), owner = owner , schedule = schedule , provider = provider , description = description , ) self . __resources . append ( source ) return ColumnSourceRegistrar ( self , source ) register_training_set ( name , variant , label , features , owner = '' , description = '' , schedule = '' ) Register a training set. Parameters: Name Type Description Default name str Name of training set to be registered required variant str Name of variant to be registered required label NameVariant Label of training set required features List [ NameVariant ] Features of training set required owner Union [ str , UserRegistrar ] Owner '' description str Description of training set to be registered '' schedule str Kubernetes CronJob schedule string (\" * * *\") '' Returns: Name Type Description resource ResourceRegistrar resource Source code in src\\featureform\\register.py 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 def register_training_set ( self , name : str , variant : str , label : NameVariant , features : List [ NameVariant ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , schedule : str = \"\" ): \"\"\"Register a training set. Args: name (str): Name of training set to be registered variant (str): Name of variant to be registered label (NameVariant): Label of training set features (List[NameVariant]): Features of training set owner (Union[str, UserRegistrar]): Owner description (str): Description of training set to be registered schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: resource (ResourceRegistrar): resource \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () resource = TrainingSet ( name = name , variant = variant , description = description , owner = owner , schedule = schedule , label = label , features = features , ) self . __resources . append ( resource ) register_user ( name ) Register a user. Parameters: Name Type Description Default name str User to be registered. required Returns: Name Type Description UserRegistrar UserRegistrar User Source code in src\\featureform\\register.py 457 458 459 460 461 462 463 464 465 466 467 468 def register_user ( self , name : str ) -> UserRegistrar : \"\"\"Register a user. Args: name (str): User to be registered. Returns: UserRegistrar: User \"\"\" user = User ( name ) self . __resources . append ( user ) return UserRegistrar ( self , user ) set_default_owner ( user ) Set default owner. Parameters: Name Type Description Default user str User to be set as default owner of resources. required Source code in src\\featureform\\register.py 470 471 472 473 474 475 476 def set_default_owner ( self , user : str ): \"\"\"Set default owner. Args: user (str): User to be set as default owner of resources. \"\"\" self . __default_owner = user sql_transformation ( variant , provider , name = '' , schedule = '' , owner = '' , description = '' ) SQL transformation decorator. Parameters: Name Type Description Default variant str Name of variant required provider Union [ str , OfflineProvider ] Provider required name str Name of source '' schedule str Kubernetes CronJob schedule string (\" * * *\") '' owner Union [ str , UserRegistrar ] Owner '' description str Description of SQL transformation '' Returns: Name Type Description decorator SQLTransformationDecorator decorator Source code in src\\featureform\\register.py 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 def sql_transformation ( self , variant : str , provider : Union [ str , OfflineProvider ], name : str = \"\" , schedule : str = \"\" , owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" ): \"\"\"SQL transformation decorator. Args: variant (str): Name of variant provider (Union[str, OfflineProvider]): Provider name (str): Name of source schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") owner (Union[str, UserRegistrar]): Owner description (str): Description of SQL transformation Returns: decorator (SQLTransformationDecorator): decorator \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () decorator = SQLTransformationDecorator ( registrar = self , name = name , variant = variant , provider = provider , schedule = schedule , owner = owner , description = description , ) self . __resources . append ( decorator ) return decorator","title":"Client"},{"location":"client/#client","text":"These functions are used to registed new resources and retrieving existing resources. Retrieved resources can be used to register additional resources. If information on these resources is needed (e.g. retrieve the names of all variants of a feature), use the Resource Client instead. definitions.py import featureform as ff # e.g. registering a new provider redis = ff . register_redis ( name = \"redis-quickstart\" , host = \"quickstart-redis\" , # The internal dns name for redis port = 6379 , description = \"A Redis deployment we created for the Featureform quickstart\" ) Source code in src\\featureform\\register.pyclass Registrar : \"\"\"These functions are used to registed new resources and retrieving existing resources. Retrieved resources can be used to register additional resources. If information on these resources is needed (e.g. retrieve the names of all variants of a feature), use the [Resource Client](resource_client.md) instead. ``` py title=\"definitions.py\" import featureform as ff # e.g. registering a new provider redis = ff.register_redis( name=\"redis-quickstart\", host=\"quickstart-redis\", # The internal dns name for redis port=6379, description=\"A Redis deployment we created for the Featureform quickstart\" ) ``` \"\"\" def __init__ ( self ): self . __state = ResourceState () self . __resources = [] self . __default_owner = \"\" def register_user ( self , name : str ) -> UserRegistrar : \"\"\"Register a user. Args: name (str): User to be registered. Returns: UserRegistrar: User \"\"\" user = User ( name ) self . __resources . append ( user ) return UserRegistrar ( self , user ) def set_default_owner ( self , user : str ): \"\"\"Set default owner. Args: user (str): User to be set as default owner of resources. \"\"\" self . __default_owner = user def default_owner ( self ) -> str : return self . __default_owner def must_get_default_owner ( self ) -> str : owner = self . default_owner () if owner == \"\" : raise ValueError ( \"Owner must be set or a default owner must be specified.\" ) return owner def get_source ( self , name , variant ): \"\"\"Get a source. The returned object can be used to register additional resources. **Examples**: ``` py transactions = get_source(\"transactions\",\"kaggle\") transactions.register_resources( entity=user, entity_column=\"customerid\", labels=[ {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"}, ], ) ``` Args: name (str): Name of source to be retrieved variant (str): Name of variant of source to be retrieved Returns: source (ColumnSourceRegistrar): Source \"\"\" get = SourceReference ( name = name , variant = variant , obj = None ) self . __resources . append ( get ) fakeDefinition = PrimaryData ( location = SQLTable ( name = \"\" )) fakeSource = Source ( name = name , variant = variant , definition = fakeDefinition , owner = \"\" , provider = \"\" , description = \"\" ) return ColumnSourceRegistrar ( self , fakeSource ) def get_redis ( self , name ): \"\"\"Get a Redis provider. The returned object can be used to register additional resources. **Examples**: ``` py redis = get_redis(\"redis-quickstart\") // Defining a new transformation source with retrieved Redis provider average_user_transaction.register_resources( entity=user, entity_column=\"user_id\", inference_store=redis, features=[ {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"}, ], ) ``` Args: name (str): Name of Redis provider to be retrieved Returns: redis (OnlineProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"redis\" , obj = None ) self . __resources . append ( get ) fakeConfig = RedisConfig ( host = \"\" , port = 123 , password = \"\" , db = 123 ) fakeProvider = Provider ( name = name , function = \"ONLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OnlineProvider ( self , fakeProvider ) def get_postgres ( self , name ): \"\"\"Get a Postgres provider. The returned object can be used to register additional resources. **Examples**: ``` py postgres = get_postgres(\"postgres-quickstart\") transactions = postgres.register_table( name=\"transactions\", variant=\"kaggle\", description=\"Fraud Dataset From Kaggle\", table=\"Transactions\", # This is the table's name in Postgres ) ``` Args: name (str): Name of Postgres provider to be retrieved Returns: postgres (OfflineSQLProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"postgres\" , obj = None ) self . __resources . append ( get ) fakeConfig = PostgresConfig ( host = \"\" , port = \"\" , database = \"\" , user = \"\" , password = \"\" ) fakeProvider = Provider ( name = name , function = \"OFFLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OfflineSQLProvider ( self , fakeProvider ) def get_snowflake ( self , name ): \"\"\"Get a Snowflake provider. The returned object can be used to register additional resources. **Examples**: ``` py snowflake = get_snowflake(\"snowflake-quickstart\") transactions = snowflake.register_table( name=\"transactions\", variant=\"kaggle\", description=\"Fraud Dataset From Kaggle\", table=\"Transactions\", # This is the table's name in Postgres ) ``` Args: name (str): Name of Snowflake provider to be retrieved Returns: snowflake (OfflineSQLProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"snowflake\" , obj = None ) self . __resources . append ( get ) fakeConfig = SnowflakeConfig ( account = \"\" , database = \"\" , organization = \"\" , username = \"\" , password = \"\" , schema = \"\" ) fakeProvider = Provider ( name = name , function = \"OFFLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OfflineSQLProvider ( self , fakeProvider ) def get_entity ( self , name ): \"\"\"Get an entity. The returned object can be used to register additional resources. **Examples**: ``` py entity = get_entity(\"user\") transactions.register_resources( entity=entity, entity_column=\"customerid\", labels=[ {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"}, ], ) ``` Args: name (str): Name of entity to be retrieved Returns: entity (EntityRegistrar): Entity \"\"\" get = EntityReference ( name = name , obj = None ) fakeEntity = Entity ( name = name , description = \"\" ) self . __resources . append ( get ) return EntityRegistrar ( self , fakeEntity ) def register_redis ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 6379 , password : str = \"\" , db : int = 0 ): \"\"\"Register a Redis provider. **Examples**: ``` redis = ff.register_redis( name=\"redis-quickstart\", host=\"quickstart-redis\", # The internal dns name for redis port=6379, description=\"A Redis deployment we created for the Featureform quickstart\" ) ``` Args: name (str): Name of Redis provider to be registered description (str): Description of Redis provider to be registered team (str): Name of team host (str): Internal DNS name for Redis port (int): Redis port password (str): Redis password db (str): Redis database Returns: redis (OnlineProvider): Provider \"\"\" config = RedisConfig ( host = host , port = port , password = password , db = db ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) def register_firestore ( self , name : str , description : str = \"\" , team : str = \"\" , collection : str = \"\" , project_id : str = \"\" , credentials_path : str = \"\" ): config = FirestoreConfig ( collection = collection , project_id = project_id , credentials_path = credentials_path ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) def register_cassandra ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 9042 , username : str = \"cassandra\" , password : str = \"cassandra\" , keyspace : str = \"\" , consistency : str = \"THREE\" , replication : int = 3 ): config = CassandraConfig ( host = host , port = port , username = username , password = password , keyspace = keyspace , consistency = consistency , replication = replication ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) def register_dynamodb ( self , name : str , description : str = \"\" , team : str = \"\" , access_key : str = None , secret_key : str = None , region : str = None ): \"\"\"Register a DynamoDB provider. **Examples**: ``` dynamodb = ff.register_dynamodb( name=\"dynamodb-quickstart\", host=\"quickstart-dynamodb\", # The internal dns name for dynamodb description=\"A Dynamodb deployment we created for the Featureform quickstart\", access_key=\"$ACCESS_KEY\", secret_key=\"$SECRET_KEY\", region=\"us-east-1\" ) ``` Args: name (str): Name of DynamoDB provider to be registered description (str): Description of DynamoDB provider to be registered team (str): Name of team access_key (str): Access key secret_key (str): Secret key region (str): Region Returns: dynamodb (OnlineProvider): Provider \"\"\" config = DynamodbConfig ( access_key = access_key , secret_key = secret_key , region = region ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider ) def register_snowflake ( self , name : str , username : str , password : str , account : str , organization : str , database : str , schema : str = \"PUBLIC\" , description : str = \"\" , team : str = \"\" , ): \"\"\"Register a Snowflake provider. **Examples**: ``` snowflake = ff.register_snowflake( name=\"snowflake-quickstart\", username=\"snowflake\", password=\"password\", account=\"account\", database=\"snowflake\", schema=\"PUBLIC\", description=\"A Dynamodb deployment we created for the Featureform quickstart\" ) ``` Args: name (str): Name of Snowflake provider to be registered username (str): Username password (str): Password account (str): Account organization (str): Organization database (str): Database schema (str): Schema description (str): Description of Snowflake provider to be registered team (str): Name of team Returns: snowflake (OfflineSQLProvider): Provider \"\"\" config = SnowflakeConfig ( account = account , database = database , organization = organization , username = username , password = password , schema = schema ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider ) def register_postgres ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 5432 , user : str = \"postgres\" , password : str = \"password\" , database : str = \"postgres\" ): \"\"\"Register a Postgres provider. **Examples**: ``` postgres = ff.register_postgres( name=\"postgres-quickstart\", description=\"A Postgres deployment we created for the Featureform quickstart\", host=\"quickstart-postgres\", # The internal dns name for postgres port=\"5432\", user=\"postgres\", password=\"password\", database=\"postgres\" ) ``` Args: name (str): Name of Postgres provider to be registered description (str): Description of Postgres provider to be registered team (str): Name of team host (str): Internal DNS name of Postgres port (str): Port user (str): User password (str): Password database (str): Database Returns: postgres (OfflineSQLProvider): Provider \"\"\" config = PostgresConfig ( host = host , port = port , database = database , user = user , password = password ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider ) def register_redshift ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"\" , port : int = 5432 , user : str = \"redshift\" , password : str = \"password\" , database : str = \"dev\" ): \"\"\"Register a Redshift provider. **Examples**: ``` redshift = ff.register_redshift( name=\"redshift-quickstart\", description=\"A Redshift deployment we created for the Featureform quickstart\", host=\"quickstart-redshift\", # The internal dns name for postgres port=\"5432\", user=\"redshift\", password=\"password\", database=\"dev\" ) ``` Args: name (str): Name of Redshift provider to be registered description (str): Description of Redshift provider to be registered team (str): Name of team host (str): Internal DNS name of Redshift port (str): Port user (str): User password (str): Password database (str): Database Returns: redshift (OfflineSQLProvider): Provider \"\"\" config = RedshiftConfig ( host = host , port = port , database = database , user = user , password = password ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider ) def register_local ( self ): \"\"\"Register a Local provider. **Examples**: ``` local = register_local() ``` Returns: local (LocalProvider): Provider \"\"\" config = LocalConfig () provider = Provider ( name = \"local mode\" , function = \"ONLINE\" , description = \"This is local mode\" , team = \"team\" , config = config ) self . __resources . append ( provider ) return LocalProvider ( self , provider ) def register_primary_data ( self , name : str , variant : str , location : Location , provider : Union [ str , OfflineProvider ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" ): \"\"\"Register a primary data source. Args: name (str): Name of source variant (str): Name of variant location (Location): Location of primary data provider (Union[str, OfflineProvider]): Provider owner (Union[str, UserRegistrar]): Owner description (str): Description of primary data to be registered Returns: source (ColumnSourceRegistrar): Source \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () source = Source ( name = name , variant = variant , definition = PrimaryData ( location = location ), owner = owner , provider = provider , description = description ) self . __resources . append ( source ) return ColumnSourceRegistrar ( self , source ) def register_sql_transformation ( self , name : str , variant : str , query : str , provider : Union [ str , OfflineProvider ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , schedule : str = \"\" ): \"\"\"Register a SQL transformation source. Args: name (str): Name of source variant (str): Name of variant query (str): SQL query provider (Union[str, OfflineProvider]): Provider owner (Union[str, UserRegistrar]): Owner description (str): Description of primary data to be registered schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: source (ColumnSourceRegistrar): Source \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () source = Source ( name = name , variant = variant , definition = SQLTransformation ( query ), owner = owner , schedule = schedule , provider = provider , description = description , ) self . __resources . append ( source ) return ColumnSourceRegistrar ( self , source ) def sql_transformation ( self , variant : str , provider : Union [ str , OfflineProvider ], name : str = \"\" , schedule : str = \"\" , owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" ): \"\"\"SQL transformation decorator. Args: variant (str): Name of variant provider (Union[str, OfflineProvider]): Provider name (str): Name of source schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") owner (Union[str, UserRegistrar]): Owner description (str): Description of SQL transformation Returns: decorator (SQLTransformationDecorator): decorator \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () decorator = SQLTransformationDecorator ( registrar = self , name = name , variant = variant , provider = provider , schedule = schedule , owner = owner , description = description , ) self . __resources . append ( decorator ) return decorator def df_transformation ( self , variant : str , provider : Union [ str , OfflineProvider ], name : str = \"\" , owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , inputs : list = []): \"\"\"Dataframe transformation decorator. Args: variant (str): Name of variant provider (Union[str, OfflineProvider]): Provider name (str): Name of source owner (Union[str, UserRegistrar]): Owner description (str): Description of SQL transformation inputs (list): Inputs to transformation Returns: decorator (DFTransformationDecorator): decorator \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () decorator = DFTransformationDecorator ( registrar = self , name = name , variant = variant , provider = provider , owner = owner , description = description , inputs = inputs , ) self . __resources . append ( decorator ) return decorator def state ( self ): for resource in self . __resources : if isinstance ( resource , SQLTransformationDecorator ) or isinstance ( resource , DFTransformationDecorator ): resource = resource . to_source () self . __state . add ( resource ) self . __resources = [] return self . __state def register_entity ( self , name : str , description : str = \"\" ): \"\"\"Register an entity. Args: name (str): Name of entity to be registered description (str): Description of entity to be registered Returns: entity (EntityRegistrar): Entity \"\"\" entity = Entity ( name = name , description = description ) self . __resources . append ( entity ) return EntityRegistrar ( self , entity ) def register_column_resources ( self , source : Union [ NameVariant , SourceRegistrar , SQLTransformationDecorator ], entity : Union [ str , EntityRegistrar ], entity_column : str , owner : Union [ str , UserRegistrar ] = \"\" , inference_store : Union [ str , OnlineProvider ] = \"\" , features : List [ ColumnMapping ] = None , labels : List [ ColumnMapping ] = None , timestamp_column : str = \"\" , description : str = \"\" , schedule : str = \"\" , ): \"\"\"Create features and labels from a source. Used in the register_resources function. Args: source (Union[NameVariant, SourceRegistrar, SQLTransformationDecorator]): Source of features, labels, entity entity (Union[str, EntityRegistrar]): Entity entity_column (str): Column of entity in source owner (Union[str, UserRegistrar]): Owner inference_store (Union[str, OnlineProvider]): Online provider features (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) labels (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) description (str): Description schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: resource (ResourceRegistrar): resource \"\"\" if features is None : features = [] if labels is None : labels = [] if len ( features ) == 0 and len ( labels ) == 0 : raise ValueError ( \"No features or labels set\" ) if not isinstance ( source , tuple ): source = source . id () if not isinstance ( entity , str ): entity = entity . name () if not isinstance ( inference_store , str ): inference_store = inference_store . name () if len ( features ) > 0 and inference_store == \"\" : raise ValueError ( \"Inference store must be set when defining features\" ) if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () feature_resources = [] label_resources = [] for feature in features : resource = Feature ( name = feature [ \"name\" ], variant = feature [ \"variant\" ], source = source , value_type = feature [ \"type\" ], entity = entity , owner = owner , provider = inference_store , description = description , schedule = schedule , location = ResourceColumnMapping ( entity = entity_column , value = feature [ \"column\" ], timestamp = timestamp_column , ), ) self . __resources . append ( resource ) feature_resources . append ( resource ) for label in labels : resource = Label ( name = label [ \"name\" ], variant = label [ \"variant\" ], source = source , value_type = label [ \"type\" ], entity = entity , owner = owner , provider = inference_store , description = description , location = ResourceColumnMapping ( entity = entity_column , value = label [ \"column\" ], timestamp = timestamp_column , ), ) self . __resources . append ( resource ) label_resources . append ( resource ) return ResourceRegistrar ( self , features , labels ) def register_training_set ( self , name : str , variant : str , label : NameVariant , features : List [ NameVariant ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , schedule : str = \"\" ): \"\"\"Register a training set. Args: name (str): Name of training set to be registered variant (str): Name of variant to be registered label (NameVariant): Label of training set features (List[NameVariant]): Features of training set owner (Union[str, UserRegistrar]): Owner description (str): Description of training set to be registered schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: resource (ResourceRegistrar): resource \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () resource = TrainingSet ( name = name , variant = variant , description = description , owner = owner , schedule = schedule , label = label , features = features , ) self . __resources . append ( resource )","title":"Client"},{"location":"client/#src.featureform.register.Registrar.df_transformation","text":"Dataframe transformation decorator. Parameters: Name Type Description Default variant str Name of variant required provider Union [ str , OfflineProvider ] Provider required name str Name of source '' owner Union [ str , UserRegistrar ] Owner '' description str Description of SQL transformation '' inputs list Inputs to transformation [] Returns: Name Type Description decorator DFTransformationDecorator decorator Source code in src\\featureform\\register.py 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 def df_transformation ( self , variant : str , provider : Union [ str , OfflineProvider ], name : str = \"\" , owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , inputs : list = []): \"\"\"Dataframe transformation decorator. Args: variant (str): Name of variant provider (Union[str, OfflineProvider]): Provider name (str): Name of source owner (Union[str, UserRegistrar]): Owner description (str): Description of SQL transformation inputs (list): Inputs to transformation Returns: decorator (DFTransformationDecorator): decorator \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () decorator = DFTransformationDecorator ( registrar = self , name = name , variant = variant , provider = provider , owner = owner , description = description , inputs = inputs , ) self . __resources . append ( decorator ) return decorator","title":"df_transformation()"},{"location":"client/#src.featureform.register.Registrar.get_entity","text":"Get an entity. The returned object can be used to register additional resources. Examples : entity = get_entity ( \"user\" ) transactions . register_resources ( entity = entity , entity_column = \"customerid\" , labels = [ { \"name\" : \"fraudulent\" , \"variant\" : \"quickstart\" , \"column\" : \"isfraud\" , \"type\" : \"bool\" }, ], ) Parameters: Name Type Description Default name str Name of entity to be retrieved required Returns: Name Type Description entity EntityRegistrar Entity Source code in src\\featureform\\register.py 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 def get_entity ( self , name ): \"\"\"Get an entity. The returned object can be used to register additional resources. **Examples**: ``` py entity = get_entity(\"user\") transactions.register_resources( entity=entity, entity_column=\"customerid\", labels=[ {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"}, ], ) ``` Args: name (str): Name of entity to be retrieved Returns: entity (EntityRegistrar): Entity \"\"\" get = EntityReference ( name = name , obj = None ) fakeEntity = Entity ( name = name , description = \"\" ) self . __resources . append ( get ) return EntityRegistrar ( self , fakeEntity )","title":"get_entity()"},{"location":"client/#src.featureform.register.Registrar.get_postgres","text":"Get a Postgres provider. The returned object can be used to register additional resources. Examples : postgres = get_postgres ( \"postgres-quickstart\" ) transactions = postgres . register_table ( name = \"transactions\" , variant = \"kaggle\" , description = \"Fraud Dataset From Kaggle\" , table = \"Transactions\" , # This is the table's name in Postgres ) Parameters: Name Type Description Default name str Name of Postgres provider to be retrieved required Returns: Name Type Description postgres OfflineSQLProvider Provider Source code in src\\featureform\\register.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 def get_postgres ( self , name ): \"\"\"Get a Postgres provider. The returned object can be used to register additional resources. **Examples**: ``` py postgres = get_postgres(\"postgres-quickstart\") transactions = postgres.register_table( name=\"transactions\", variant=\"kaggle\", description=\"Fraud Dataset From Kaggle\", table=\"Transactions\", # This is the table's name in Postgres ) ``` Args: name (str): Name of Postgres provider to be retrieved Returns: postgres (OfflineSQLProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"postgres\" , obj = None ) self . __resources . append ( get ) fakeConfig = PostgresConfig ( host = \"\" , port = \"\" , database = \"\" , user = \"\" , password = \"\" ) fakeProvider = Provider ( name = name , function = \"OFFLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OfflineSQLProvider ( self , fakeProvider )","title":"get_postgres()"},{"location":"client/#src.featureform.register.Registrar.get_redis","text":"Get a Redis provider. The returned object can be used to register additional resources. Examples : redis = get_redis ( \"redis-quickstart\" ) // Defining a new transformation source with retrieved Redis provider average_user_transaction . register_resources ( entity = user , entity_column = \"user_id\" , inference_store = redis , features = [ { \"name\" : \"avg_transactions\" , \"variant\" : \"quickstart\" , \"column\" : \"avg_transaction_amt\" , \"type\" : \"float32\" }, ], ) Parameters: Name Type Description Default name str Name of Redis provider to be retrieved required Returns: Name Type Description redis OnlineProvider Provider Source code in src\\featureform\\register.py 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 def get_redis ( self , name ): \"\"\"Get a Redis provider. The returned object can be used to register additional resources. **Examples**: ``` py redis = get_redis(\"redis-quickstart\") // Defining a new transformation source with retrieved Redis provider average_user_transaction.register_resources( entity=user, entity_column=\"user_id\", inference_store=redis, features=[ {\"name\": \"avg_transactions\", \"variant\": \"quickstart\", \"column\": \"avg_transaction_amt\", \"type\": \"float32\"}, ], ) ``` Args: name (str): Name of Redis provider to be retrieved Returns: redis (OnlineProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"redis\" , obj = None ) self . __resources . append ( get ) fakeConfig = RedisConfig ( host = \"\" , port = 123 , password = \"\" , db = 123 ) fakeProvider = Provider ( name = name , function = \"ONLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OnlineProvider ( self , fakeProvider )","title":"get_redis()"},{"location":"client/#src.featureform.register.Registrar.get_snowflake","text":"Get a Snowflake provider. The returned object can be used to register additional resources. Examples : snowflake = get_snowflake ( \"snowflake-quickstart\" ) transactions = snowflake . register_table ( name = \"transactions\" , variant = \"kaggle\" , description = \"Fraud Dataset From Kaggle\" , table = \"Transactions\" , # This is the table's name in Postgres ) Parameters: Name Type Description Default name str Name of Snowflake provider to be retrieved required Returns: Name Type Description snowflake OfflineSQLProvider Provider Source code in src\\featureform\\register.py 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 def get_snowflake ( self , name ): \"\"\"Get a Snowflake provider. The returned object can be used to register additional resources. **Examples**: ``` py snowflake = get_snowflake(\"snowflake-quickstart\") transactions = snowflake.register_table( name=\"transactions\", variant=\"kaggle\", description=\"Fraud Dataset From Kaggle\", table=\"Transactions\", # This is the table's name in Postgres ) ``` Args: name (str): Name of Snowflake provider to be retrieved Returns: snowflake (OfflineSQLProvider): Provider \"\"\" get = ProviderReference ( name = name , provider_type = \"snowflake\" , obj = None ) self . __resources . append ( get ) fakeConfig = SnowflakeConfig ( account = \"\" , database = \"\" , organization = \"\" , username = \"\" , password = \"\" , schema = \"\" ) fakeProvider = Provider ( name = name , function = \"OFFLINE\" , description = \"\" , team = \"\" , config = fakeConfig ) return OfflineSQLProvider ( self , fakeProvider )","title":"get_snowflake()"},{"location":"client/#src.featureform.register.Registrar.get_source","text":"Get a source. The returned object can be used to register additional resources. Examples : transactions = get_source ( \"transactions\" , \"kaggle\" ) transactions . register_resources ( entity = user , entity_column = \"customerid\" , labels = [ { \"name\" : \"fraudulent\" , \"variant\" : \"quickstart\" , \"column\" : \"isfraud\" , \"type\" : \"bool\" }, ], ) Parameters: Name Type Description Default name str Name of source to be retrieved required variant str Name of variant of source to be retrieved required Returns: Name Type Description source ColumnSourceRegistrar Source Source code in src\\featureform\\register.py 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 def get_source ( self , name , variant ): \"\"\"Get a source. The returned object can be used to register additional resources. **Examples**: ``` py transactions = get_source(\"transactions\",\"kaggle\") transactions.register_resources( entity=user, entity_column=\"customerid\", labels=[ {\"name\": \"fraudulent\", \"variant\": \"quickstart\", \"column\": \"isfraud\", \"type\": \"bool\"}, ], ) ``` Args: name (str): Name of source to be retrieved variant (str): Name of variant of source to be retrieved Returns: source (ColumnSourceRegistrar): Source \"\"\" get = SourceReference ( name = name , variant = variant , obj = None ) self . __resources . append ( get ) fakeDefinition = PrimaryData ( location = SQLTable ( name = \"\" )) fakeSource = Source ( name = name , variant = variant , definition = fakeDefinition , owner = \"\" , provider = \"\" , description = \"\" ) return ColumnSourceRegistrar ( self , fakeSource )","title":"get_source()"},{"location":"client/#src.featureform.register.Registrar.register_column_resources","text":"Create features and labels from a source. Used in the register_resources function. Parameters: Name Type Description Default source Union [ NameVariant , SourceRegistrar , SQLTransformationDecorator ] Source of features, labels, entity required entity Union [ str , EntityRegistrar ] Entity required entity_column str Column of entity in source required owner Union [ str , UserRegistrar ] Owner '' inference_store Union [ str , OnlineProvider ] Online provider '' features List [ ColumnMapping ] List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) None labels List [ ColumnMapping ] List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) None description str Description '' schedule str Kubernetes CronJob schedule string (\" * * *\") '' Returns: Name Type Description resource ResourceRegistrar resource Source code in src\\featureform\\register.py 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 def register_column_resources ( self , source : Union [ NameVariant , SourceRegistrar , SQLTransformationDecorator ], entity : Union [ str , EntityRegistrar ], entity_column : str , owner : Union [ str , UserRegistrar ] = \"\" , inference_store : Union [ str , OnlineProvider ] = \"\" , features : List [ ColumnMapping ] = None , labels : List [ ColumnMapping ] = None , timestamp_column : str = \"\" , description : str = \"\" , schedule : str = \"\" , ): \"\"\"Create features and labels from a source. Used in the register_resources function. Args: source (Union[NameVariant, SourceRegistrar, SQLTransformationDecorator]): Source of features, labels, entity entity (Union[str, EntityRegistrar]): Entity entity_column (str): Column of entity in source owner (Union[str, UserRegistrar]): Owner inference_store (Union[str, OnlineProvider]): Online provider features (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) labels (List[ColumnMapping]): List of ColumnMapping objects (dictionaries containing the keys: name, variant, column, resource_type) description (str): Description schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: resource (ResourceRegistrar): resource \"\"\" if features is None : features = [] if labels is None : labels = [] if len ( features ) == 0 and len ( labels ) == 0 : raise ValueError ( \"No features or labels set\" ) if not isinstance ( source , tuple ): source = source . id () if not isinstance ( entity , str ): entity = entity . name () if not isinstance ( inference_store , str ): inference_store = inference_store . name () if len ( features ) > 0 and inference_store == \"\" : raise ValueError ( \"Inference store must be set when defining features\" ) if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () feature_resources = [] label_resources = [] for feature in features : resource = Feature ( name = feature [ \"name\" ], variant = feature [ \"variant\" ], source = source , value_type = feature [ \"type\" ], entity = entity , owner = owner , provider = inference_store , description = description , schedule = schedule , location = ResourceColumnMapping ( entity = entity_column , value = feature [ \"column\" ], timestamp = timestamp_column , ), ) self . __resources . append ( resource ) feature_resources . append ( resource ) for label in labels : resource = Label ( name = label [ \"name\" ], variant = label [ \"variant\" ], source = source , value_type = label [ \"type\" ], entity = entity , owner = owner , provider = inference_store , description = description , location = ResourceColumnMapping ( entity = entity_column , value = label [ \"column\" ], timestamp = timestamp_column , ), ) self . __resources . append ( resource ) label_resources . append ( resource ) return ResourceRegistrar ( self , features , labels )","title":"register_column_resources()"},{"location":"client/#src.featureform.register.Registrar.register_dynamodb","text":"Register a DynamoDB provider. Examples : dynamodb = ff.register_dynamodb( name=\"dynamodb-quickstart\", host=\"quickstart-dynamodb\", # The internal dns name for dynamodb description=\"A Dynamodb deployment we created for the Featureform quickstart\", access_key=\"$ACCESS_KEY\", secret_key=\"$SECRET_KEY\", region=\"us-east-1\" ) Parameters: Name Type Description Default name str Name of DynamoDB provider to be registered required description str Description of DynamoDB provider to be registered '' team str Name of team '' access_key str Access key None secret_key str Secret key None region str Region None Returns: Name Type Description dynamodb OnlineProvider Provider Source code in src\\featureform\\register.py 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 def register_dynamodb ( self , name : str , description : str = \"\" , team : str = \"\" , access_key : str = None , secret_key : str = None , region : str = None ): \"\"\"Register a DynamoDB provider. **Examples**: ``` dynamodb = ff.register_dynamodb( name=\"dynamodb-quickstart\", host=\"quickstart-dynamodb\", # The internal dns name for dynamodb description=\"A Dynamodb deployment we created for the Featureform quickstart\", access_key=\"$ACCESS_KEY\", secret_key=\"$SECRET_KEY\", region=\"us-east-1\" ) ``` Args: name (str): Name of DynamoDB provider to be registered description (str): Description of DynamoDB provider to be registered team (str): Name of team access_key (str): Access key secret_key (str): Secret key region (str): Region Returns: dynamodb (OnlineProvider): Provider \"\"\" config = DynamodbConfig ( access_key = access_key , secret_key = secret_key , region = region ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider )","title":"register_dynamodb()"},{"location":"client/#src.featureform.register.Registrar.register_entity","text":"Register an entity. Parameters: Name Type Description Default name str Name of entity to be registered required description str Description of entity to be registered '' Returns: Name Type Description entity EntityRegistrar Entity Source code in src\\featureform\\register.py 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 def register_entity ( self , name : str , description : str = \"\" ): \"\"\"Register an entity. Args: name (str): Name of entity to be registered description (str): Description of entity to be registered Returns: entity (EntityRegistrar): Entity \"\"\" entity = Entity ( name = name , description = description ) self . __resources . append ( entity ) return EntityRegistrar ( self , entity )","title":"register_entity()"},{"location":"client/#src.featureform.register.Registrar.register_local","text":"Register a Local provider. Examples : local = register_local() Returns: Name Type Description local LocalProvider Provider Source code in src\\featureform\\register.py 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 def register_local ( self ): \"\"\"Register a Local provider. **Examples**: ``` local = register_local() ``` Returns: local (LocalProvider): Provider \"\"\" config = LocalConfig () provider = Provider ( name = \"local mode\" , function = \"ONLINE\" , description = \"This is local mode\" , team = \"team\" , config = config ) self . __resources . append ( provider ) return LocalProvider ( self , provider )","title":"register_local()"},{"location":"client/#src.featureform.register.Registrar.register_postgres","text":"Register a Postgres provider. Examples : postgres = ff.register_postgres( name=\"postgres-quickstart\", description=\"A Postgres deployment we created for the Featureform quickstart\", host=\"quickstart-postgres\", # The internal dns name for postgres port=\"5432\", user=\"postgres\", password=\"password\", database=\"postgres\" ) Parameters: Name Type Description Default name str Name of Postgres provider to be registered required description str Description of Postgres provider to be registered '' team str Name of team '' host str Internal DNS name of Postgres '0.0.0.0' port str Port 5432 user str User 'postgres' password str Password 'password' database str Database 'postgres' Returns: Name Type Description postgres OfflineSQLProvider Provider Source code in src\\featureform\\register.py 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 def register_postgres ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 5432 , user : str = \"postgres\" , password : str = \"password\" , database : str = \"postgres\" ): \"\"\"Register a Postgres provider. **Examples**: ``` postgres = ff.register_postgres( name=\"postgres-quickstart\", description=\"A Postgres deployment we created for the Featureform quickstart\", host=\"quickstart-postgres\", # The internal dns name for postgres port=\"5432\", user=\"postgres\", password=\"password\", database=\"postgres\" ) ``` Args: name (str): Name of Postgres provider to be registered description (str): Description of Postgres provider to be registered team (str): Name of team host (str): Internal DNS name of Postgres port (str): Port user (str): User password (str): Password database (str): Database Returns: postgres (OfflineSQLProvider): Provider \"\"\" config = PostgresConfig ( host = host , port = port , database = database , user = user , password = password ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider )","title":"register_postgres()"},{"location":"client/#src.featureform.register.Registrar.register_primary_data","text":"Register a primary data source. Parameters: Name Type Description Default name str Name of source required variant str Name of variant required location Location Location of primary data required provider Union [ str , OfflineProvider ] Provider required owner Union [ str , UserRegistrar ] Owner '' description str Description of primary data to be registered '' Returns: Name Type Description source ColumnSourceRegistrar Source Source code in src\\featureform\\register.py 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 def register_primary_data ( self , name : str , variant : str , location : Location , provider : Union [ str , OfflineProvider ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" ): \"\"\"Register a primary data source. Args: name (str): Name of source variant (str): Name of variant location (Location): Location of primary data provider (Union[str, OfflineProvider]): Provider owner (Union[str, UserRegistrar]): Owner description (str): Description of primary data to be registered Returns: source (ColumnSourceRegistrar): Source \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () source = Source ( name = name , variant = variant , definition = PrimaryData ( location = location ), owner = owner , provider = provider , description = description ) self . __resources . append ( source ) return ColumnSourceRegistrar ( self , source )","title":"register_primary_data()"},{"location":"client/#src.featureform.register.Registrar.register_redis","text":"Register a Redis provider. Examples : redis = ff.register_redis( name=\"redis-quickstart\", host=\"quickstart-redis\", # The internal dns name for redis port=6379, description=\"A Redis deployment we created for the Featureform quickstart\" ) Parameters: Name Type Description Default name str Name of Redis provider to be registered required description str Description of Redis provider to be registered '' team str Name of team '' host str Internal DNS name for Redis '0.0.0.0' port int Redis port 6379 password str Redis password '' db str Redis database 0 Returns: Name Type Description redis OnlineProvider Provider Source code in src\\featureform\\register.py 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 def register_redis ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"0.0.0.0\" , port : int = 6379 , password : str = \"\" , db : int = 0 ): \"\"\"Register a Redis provider. **Examples**: ``` redis = ff.register_redis( name=\"redis-quickstart\", host=\"quickstart-redis\", # The internal dns name for redis port=6379, description=\"A Redis deployment we created for the Featureform quickstart\" ) ``` Args: name (str): Name of Redis provider to be registered description (str): Description of Redis provider to be registered team (str): Name of team host (str): Internal DNS name for Redis port (int): Redis port password (str): Redis password db (str): Redis database Returns: redis (OnlineProvider): Provider \"\"\" config = RedisConfig ( host = host , port = port , password = password , db = db ) provider = Provider ( name = name , function = \"ONLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OnlineProvider ( self , provider )","title":"register_redis()"},{"location":"client/#src.featureform.register.Registrar.register_redshift","text":"Register a Redshift provider. Examples : redshift = ff.register_redshift( name=\"redshift-quickstart\", description=\"A Redshift deployment we created for the Featureform quickstart\", host=\"quickstart-redshift\", # The internal dns name for postgres port=\"5432\", user=\"redshift\", password=\"password\", database=\"dev\" ) Parameters: Name Type Description Default name str Name of Redshift provider to be registered required description str Description of Redshift provider to be registered '' team str Name of team '' host str Internal DNS name of Redshift '' port str Port 5432 user str User 'redshift' password str Password 'password' database str Database 'dev' Returns: Name Type Description redshift OfflineSQLProvider Provider Source code in src\\featureform\\register.py 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 def register_redshift ( self , name : str , description : str = \"\" , team : str = \"\" , host : str = \"\" , port : int = 5432 , user : str = \"redshift\" , password : str = \"password\" , database : str = \"dev\" ): \"\"\"Register a Redshift provider. **Examples**: ``` redshift = ff.register_redshift( name=\"redshift-quickstart\", description=\"A Redshift deployment we created for the Featureform quickstart\", host=\"quickstart-redshift\", # The internal dns name for postgres port=\"5432\", user=\"redshift\", password=\"password\", database=\"dev\" ) ``` Args: name (str): Name of Redshift provider to be registered description (str): Description of Redshift provider to be registered team (str): Name of team host (str): Internal DNS name of Redshift port (str): Port user (str): User password (str): Password database (str): Database Returns: redshift (OfflineSQLProvider): Provider \"\"\" config = RedshiftConfig ( host = host , port = port , database = database , user = user , password = password ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider )","title":"register_redshift()"},{"location":"client/#src.featureform.register.Registrar.register_snowflake","text":"Register a Snowflake provider. Examples : snowflake = ff.register_snowflake( name=\"snowflake-quickstart\", username=\"snowflake\", password=\"password\", account=\"account\", database=\"snowflake\", schema=\"PUBLIC\", description=\"A Dynamodb deployment we created for the Featureform quickstart\" ) Parameters: Name Type Description Default name str Name of Snowflake provider to be registered required username str Username required password str Password required account str Account required organization str Organization required database str Database required schema str Schema 'PUBLIC' description str Description of Snowflake provider to be registered '' team str Name of team '' Returns: Name Type Description snowflake OfflineSQLProvider Provider Source code in src\\featureform\\register.py 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 def register_snowflake ( self , name : str , username : str , password : str , account : str , organization : str , database : str , schema : str = \"PUBLIC\" , description : str = \"\" , team : str = \"\" , ): \"\"\"Register a Snowflake provider. **Examples**: ``` snowflake = ff.register_snowflake( name=\"snowflake-quickstart\", username=\"snowflake\", password=\"password\", account=\"account\", database=\"snowflake\", schema=\"PUBLIC\", description=\"A Dynamodb deployment we created for the Featureform quickstart\" ) ``` Args: name (str): Name of Snowflake provider to be registered username (str): Username password (str): Password account (str): Account organization (str): Organization database (str): Database schema (str): Schema description (str): Description of Snowflake provider to be registered team (str): Name of team Returns: snowflake (OfflineSQLProvider): Provider \"\"\" config = SnowflakeConfig ( account = account , database = database , organization = organization , username = username , password = password , schema = schema ) provider = Provider ( name = name , function = \"OFFLINE\" , description = description , team = team , config = config ) self . __resources . append ( provider ) return OfflineSQLProvider ( self , provider )","title":"register_snowflake()"},{"location":"client/#src.featureform.register.Registrar.register_sql_transformation","text":"Register a SQL transformation source. Parameters: Name Type Description Default name str Name of source required variant str Name of variant required query str SQL query required provider Union [ str , OfflineProvider ] Provider required owner Union [ str , UserRegistrar ] Owner '' description str Description of primary data to be registered '' schedule str Kubernetes CronJob schedule string (\" * * *\") '' Returns: Name Type Description source ColumnSourceRegistrar Source Source code in src\\featureform\\register.py 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 def register_sql_transformation ( self , name : str , variant : str , query : str , provider : Union [ str , OfflineProvider ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , schedule : str = \"\" ): \"\"\"Register a SQL transformation source. Args: name (str): Name of source variant (str): Name of variant query (str): SQL query provider (Union[str, OfflineProvider]): Provider owner (Union[str, UserRegistrar]): Owner description (str): Description of primary data to be registered schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: source (ColumnSourceRegistrar): Source \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () source = Source ( name = name , variant = variant , definition = SQLTransformation ( query ), owner = owner , schedule = schedule , provider = provider , description = description , ) self . __resources . append ( source ) return ColumnSourceRegistrar ( self , source )","title":"register_sql_transformation()"},{"location":"client/#src.featureform.register.Registrar.register_training_set","text":"Register a training set. Parameters: Name Type Description Default name str Name of training set to be registered required variant str Name of variant to be registered required label NameVariant Label of training set required features List [ NameVariant ] Features of training set required owner Union [ str , UserRegistrar ] Owner '' description str Description of training set to be registered '' schedule str Kubernetes CronJob schedule string (\" * * *\") '' Returns: Name Type Description resource ResourceRegistrar resource Source code in src\\featureform\\register.py 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 def register_training_set ( self , name : str , variant : str , label : NameVariant , features : List [ NameVariant ], owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" , schedule : str = \"\" ): \"\"\"Register a training set. Args: name (str): Name of training set to be registered variant (str): Name of variant to be registered label (NameVariant): Label of training set features (List[NameVariant]): Features of training set owner (Union[str, UserRegistrar]): Owner description (str): Description of training set to be registered schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") Returns: resource (ResourceRegistrar): resource \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () resource = TrainingSet ( name = name , variant = variant , description = description , owner = owner , schedule = schedule , label = label , features = features , ) self . __resources . append ( resource )","title":"register_training_set()"},{"location":"client/#src.featureform.register.Registrar.register_user","text":"Register a user. Parameters: Name Type Description Default name str User to be registered. required Returns: Name Type Description UserRegistrar UserRegistrar User Source code in src\\featureform\\register.py 457 458 459 460 461 462 463 464 465 466 467 468 def register_user ( self , name : str ) -> UserRegistrar : \"\"\"Register a user. Args: name (str): User to be registered. Returns: UserRegistrar: User \"\"\" user = User ( name ) self . __resources . append ( user ) return UserRegistrar ( self , user )","title":"register_user()"},{"location":"client/#src.featureform.register.Registrar.set_default_owner","text":"Set default owner. Parameters: Name Type Description Default user str User to be set as default owner of resources. required Source code in src\\featureform\\register.py 470 471 472 473 474 475 476 def set_default_owner ( self , user : str ): \"\"\"Set default owner. Args: user (str): User to be set as default owner of resources. \"\"\" self . __default_owner = user","title":"set_default_owner()"},{"location":"client/#src.featureform.register.Registrar.sql_transformation","text":"SQL transformation decorator. Parameters: Name Type Description Default variant str Name of variant required provider Union [ str , OfflineProvider ] Provider required name str Name of source '' schedule str Kubernetes CronJob schedule string (\" * * *\") '' owner Union [ str , UserRegistrar ] Owner '' description str Description of SQL transformation '' Returns: Name Type Description decorator SQLTransformationDecorator decorator Source code in src\\featureform\\register.py 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 def sql_transformation ( self , variant : str , provider : Union [ str , OfflineProvider ], name : str = \"\" , schedule : str = \"\" , owner : Union [ str , UserRegistrar ] = \"\" , description : str = \"\" ): \"\"\"SQL transformation decorator. Args: variant (str): Name of variant provider (Union[str, OfflineProvider]): Provider name (str): Name of source schedule (str): Kubernetes CronJob schedule string (\"* * * * *\") owner (Union[str, UserRegistrar]): Owner description (str): Description of SQL transformation Returns: decorator (SQLTransformationDecorator): decorator \"\"\" if not isinstance ( owner , str ): owner = owner . name () if owner == \"\" : owner = self . must_get_default_owner () if not isinstance ( provider , str ): provider = provider . name () decorator = SQLTransformationDecorator ( registrar = self , name = name , variant = variant , provider = provider , schedule = schedule , owner = owner , description = description , ) self . __resources . append ( decorator ) return decorator","title":"sql_transformation()"},{"location":"resource_client/","text":"Resource Client Bases: Registrar The resource client is used to retrieve information on specific resources (entities, providers, features, labels, training sets, models, users). If retrieved resources are needed to register additional resources (e.g. registering a feature from a source), use the Client functions instead. Using the Resource Client: definitions.py import featureform as ff from featureform import ResourceClient rc = ResourceClient ( \"localhost:8000\" ) # example query: redis = rc . get_provider ( \"redis-quickstart\" ) Source code in src\\featureform\\register.pyclass Client ( Registrar ): \"\"\"The resource client is used to retrieve information on specific resources (entities, providers, features, labels, training sets, models, users). If retrieved resources are needed to register additional resources (e.g. registering a feature from a source), use the [Client](client.md) functions instead. **Using the Resource Client:** ``` py title=\"definitions.py\" import featureform as ff from featureform import ResourceClient rc = ResourceClient(\"localhost:8000\") # example query: redis = rc.get_provider(\"redis-quickstart\") ``` \"\"\" def __init__ ( self , host , tls_verify = True , cert_path = None ): \"\"\"Initialise a Resource Client object. Args: host (str): Host path tls_verify (bool): If true, do TLS verification cert_path (str): Path to certificate \"\"\" super () . __init__ () env_cert_path = os . getenv ( 'FEATUREFORM_CERT' ) if tls_verify : credentials = grpc . ssl_channel_credentials () channel = grpc . secure_channel ( host , credentials ) elif cert_path is not None or env_cert_path is not None : if env_cert_path is not None and cert_path is None : cert_path = env_cert_path with open ( cert_path , 'rb' ) as f : credentials = grpc . ssl_channel_credentials ( f . read ()) channel = grpc . secure_channel ( host , credentials ) else : channel = grpc . insecure_channel ( host , options = (( 'grpc.enable_http_proxy' , 0 ),)) self . _stub = ff_grpc . ApiStub ( channel ) def apply ( self ): \"\"\"Apply all definitions, creating and retrieving all specified resources. \"\"\" self . state () . create_all ( self . _stub ) def get_user ( self , name ): \"\"\"Get a user. Prints out name of user, and all resources associated with the user. **Examples:** ``` py title=\"Input\" featureformer = rc.get_user(\"featureformer\") ``` ``` json title=\"Output\" // get_user prints out formatted information on user USER NAME: featureformer ----------------------------------------------- NAME VARIANT TYPE avg_transactions quickstart feature fraudulent quickstart label fraud_training quickstart training set transactions kaggle source average_user_transaction quickstart source ----------------------------------------------- ``` ``` py title=\"Input\" print(featureformer) ``` ``` json title=\"Output\" // get_user returns the User object name: \"featureformer\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } ``` Args: name (str): Name of user to be retrieved Returns: user (User): User \"\"\" return GetUser ( self . _stub , name ) def get_entity ( self , name ): \"\"\"Get an entity. Prints out information on entity, and all resources associated with the entity. **Examples:** ``` py title=\"Input\" entity = rc.get_entity(\"user\") ``` ``` json title=\"Output\" // get_entity prints out formatted information on entity ENTITY NAME: user STATUS: NO_STATUS ----------------------------------------------- NAME VARIANT TYPE avg_transactions quickstart feature fraudulent quickstart label fraud_training quickstart training set ----------------------------------------------- ``` ``` py title=\"Input\" print(postgres) ``` ``` json title=\"Output\" // get_entity returns the Entity object name: \"user\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } ``` Args: name (str): Name of entity to be retrieved Returns: entity (Entity): Entity \"\"\" return GetEntity ( self . _stub , name ) def get_model ( self , name ): \"\"\"Get a model. Prints out information on model, and all resources associated with the model. Args: name (str): Name of model to be retrieved Returns: model (Model): Model \"\"\" return GetResource ( self . _stub , \"model\" , name ) def get_provider ( self , name ): \"\"\"Get a provider. Prints out information on provider, and all resources associated with the provider. **Examples:** ``` py title=\"Input\" postgres = rc.get_provider(\"postgres-quickstart\") ``` ``` json title=\"Output\" // get_provider prints out formatted information on provider NAME: postgres-quickstart DESCRIPTION: A Postgres deployment we created for the Featureform quickstart TYPE: POSTGRES_OFFLINE SOFTWARE: postgres STATUS: NO_STATUS ----------------------------------------------- SOURCES: NAME VARIANT transactions kaggle average_user_transaction quickstart ----------------------------------------------- FEATURES: NAME VARIANT ----------------------------------------------- LABELS: NAME VARIANT fraudulent quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(postgres) ``` ``` json title=\"Output\" // get_provider returns the Provider object name: \"postgres-quickstart\" description: \"A Postgres deployment we created for the Featureform quickstart\" type: \"POSTGRES_OFFLINE\" software: \"postgres\" serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\" sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } ``` Args: name (str): Name of provider to be retrieved Returns: provider (Provider): Provider \"\"\" return GetProvider ( self . _stub , name ) def get_feature ( self , name , variant = None ): \"\"\"Get a feature. Prints out information on feature, and all variants associated with the feature. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" avg_transactions = rc.get_feature(\"avg_transactions\") ``` ``` json title=\"Output\" // get_feature prints out formatted information on feature NAME: avg_transactions STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(avg_transactions) ``` ``` json title=\"Output\" // get_feature returns the Feature object name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" avg_transactions_variant = ff.get_feature(\"avg_transactions\", \"quickstart\") ``` ``` json title=\"Output\" // get_feature with variant provided prints out formatted information on feature variant NAME: avg_transactions VARIANT: quickstart TYPE: float32 ENTITY: user OWNER: featureformer PROVIDER: redis-quickstart STATUS: NO_STATUS ----------------------------------------------- SOURCE: NAME VARIANT average_user_transaction quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(avg_transactions_variant) ``` ``` json title=\"Output\" // get_feature returns the FeatureVariant object name: \"avg_transactions\" variant: \"quickstart\" source { name: \"average_user_transaction\" variant: \"quickstart\" } type: \"float32\" entity: \"user\" created { seconds: 1658168552 nanos: 142461900 } owner: \"featureformer\" provider: \"redis-quickstart\" trainingsets { name: \"fraud_training\" variant: \"quickstart\" } columns { entity: \"user_id\" value: \"avg_transaction_amt\" } ``` Args: name (str): Name of feature to be retrieved variant (str): Name of variant of feature Returns: feature (Union[Feature, FeatureVariant]): Feature or FeatureVariant \"\"\" if not variant : return GetResource ( self . _stub , \"feature\" , name ) return GetFeatureVariant ( self . _stub , name , variant ) def get_label ( self , name , variant = None ): \"\"\"Get a label. Prints out information on label, and all variants associated with the label. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" fraudulent = rc.get_label(\"fraudulent\") ``` ``` json title=\"Output\" // get_label prints out formatted information on label NAME: fraudulent STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent) ``` ``` json title=\"Output\" // get_label returns the Label object name: \"fraudulent\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" fraudulent_variant = ff.get_label(\"fraudulent\", \"quickstart\") ``` ``` json title=\"Output\" // get_label with variant provided prints out formatted information on label variant NAME: fraudulent VARIANT: quickstart TYPE: bool ENTITY: user OWNER: featureformer PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- SOURCE: NAME VARIANT transactions kaggle ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent_variant) ``` ``` json title=\"Output\" // get_label returns the LabelVariant object name: \"fraudulent\" variant: \"quickstart\" type: \"bool\" source { name: \"transactions\" variant: \"kaggle\" } entity: \"user\" created { seconds: 1658168552 nanos: 154924300 } owner: \"featureformer\" provider: \"postgres-quickstart\" trainingsets { name: \"fraud_training\" variant: \"quickstart\" } columns { entity: \"customerid\" value: \"isfraud\" } ``` Args: name (str): Name of label to be retrieved variant (str): Name of variant of label Returns: label (Union[label, LabelVariant]): Label or LabelVariant \"\"\" if not variant : return GetResource ( self . _stub , \"label\" , name ) return GetLabelVariant ( self . _stub , name , variant ) def get_training_set ( self , name , variant = None ): \"\"\"Get a training set. Prints out information on training set, and all variants associated with the training set. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" fraud_training = rc.get_training_set(\"fraud_training\") ``` ``` json title=\"Output\" // get_training_set prints out formatted information on training set NAME: fraud_training STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(fraud_training) ``` ``` json title=\"Output\" // get_training_set returns the TrainingSet object name: \"fraud_training\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" fraudulent_variant = ff.get_training set(\"fraudulent\", \"quickstart\") ``` ``` json title=\"Output\" // get_training_set with variant provided prints out formatted information on training set variant NAME: fraud_training VARIANT: quickstart OWNER: featureformer PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- LABEL: NAME VARIANT fraudulent quickstart ----------------------------------------------- FEATURES: NAME VARIANT avg_transactions quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent_variant) ``` ``` json title=\"Output\" // get_training_set returns the TrainingSetVariant object name: \"fraud_training\" variant: \"quickstart\" owner: \"featureformer\" created { seconds: 1658168552 nanos: 157934800 } provider: \"postgres-quickstart\" features { name: \"avg_transactions\" variant: \"quickstart\" } label { name: \"fraudulent\" variant: \"quickstart\" } ``` Args: name (str): Name of training set to be retrieved variant (str): Name of variant of training set Returns: training_set (Union[TrainingSet, TrainingSetVariant]): TrainingSet or TrainingSetVariant \"\"\" if not variant : return GetResource ( self . _stub , \"training-set\" , name ) return GetTrainingSetVariant ( self . _stub , name , variant ) def get_source ( self , name , variant = None ): \"\"\"Get a source. Prints out information on source, and all variants associated with the source. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" transactions = rc.get_transactions(\"transactions\") ``` ``` json title=\"Output\" // get_source prints out formatted information on source NAME: transactions STATUS: NO_STATUS ----------------------------------------------- VARIANTS: kaggle default ----------------------------------------------- ``` ``` py title=\"Input\" print(transactions) ``` ``` json title=\"Output\" // get_source returns the Source object name: \"transactions\" default_variant: \"kaggle\" variants: \"kaggle\" ``` ``` py title=\"Input\" transactions_variant = rc.get_source(\"transactions\", \"kaggle\") ``` ``` json title=\"Output\" // get_source with variant provided prints out formatted information on source variant NAME: transactions VARIANT: kaggle OWNER: featureformer DESCRIPTION: Fraud Dataset From Kaggle PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- DEFINITION: TRANSFORMATION ----------------------------------------------- SOURCES NAME VARIANT ----------------------------------------------- PRIMARY DATA Transactions FEATURES: NAME VARIANT ----------------------------------------------- LABELS: NAME VARIANT fraudulent quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(transactions_variant) ``` ``` json title=\"Output\" // get_source returns the SourceVariant object name: \"transactions\" variant: \"kaggle\" owner: \"featureformer\" description: \"Fraud Dataset From Kaggle\" provider: \"postgres-quickstart\" created { seconds: 1658168552 nanos: 128768000 } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } primaryData { table { name: \"Transactions\" } } ``` Args: name (str): Name of source to be retrieved variant (str): Name of variant of source Returns: source (Union[Source, SourceVariant]): Source or SourceVariant \"\"\" if not variant : return GetResource ( self . _stub , \"source\" , name ) return GetSourceVariant ( self . _stub , name , variant ) def list_features ( self ): \"\"\"List all features. **Examples:** ``` py title=\"Input\" features_list = rc.list_features() ``` ``` json title=\"Output\" // list_features prints out formatted information on all features NAME VARIANT STATUS user_age quickstart (default) READY avg_transactions quickstart (default) READY avg_transactions production CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"user_age\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" variants: \"production\" ] ``` Returns: features (List[Feature]): List of Feature Objects \"\"\" return ListNameVariantStatus ( self . _stub , \"feature\" ) def list_labels ( self ): \"\"\"List all labels. **Examples:** ``` py title=\"Input\" features_list = rc.list_labels() ``` ``` json title=\"Output\" // list_labels prints out formatted information on all labels NAME VARIANT STATUS user_age quickstart (default) READY avg_transactions quickstart (default) READY avg_transactions production CREATED ``` ``` py title=\"Input\" print(label_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"user_age\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" variants: \"production\" ] ``` Returns: labels (List[Label]): List of Label Objects \"\"\" return ListNameVariantStatus ( self . _stub , \"label\" ) def list_users ( self ): \"\"\"List all users. Prints a list of all users. **Examples:** ``` py title=\"Input\" users_list = rc.list_users() ``` ``` json title=\"Output\" // list_users prints out formatted information on all users NAME STATUS featureformer NO_STATUS featureformers_friend CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"featureformer\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" }, name: \"featureformers_friend\" features { name: \"user_age\" variant: \"production\" } sources { name: \"user_profiles\" variant: \"production\" } ] ``` Returns: users (List[User]): List of User Objects \"\"\" return ListNameStatus ( self . _stub , \"user\" ) def list_entities ( self ): \"\"\"List all entities. Prints a list of all entities. **Examples:** ``` py title=\"Input\" entities = rc.list_entities() ``` ``` json title=\"Output\" // list_entities prints out formatted information on all entities NAME STATUS user CREATED transaction CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_entities returns a list of Entity objects [name: \"user\" features { name: \"avg_transactions\" variant: \"quickstart\" } features { name: \"avg_transactions\" variant: \"production\" } features { name: \"user_age\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } , name: \"transaction\" features { name: \"amount_spent\" variant: \"production\" } ] ``` Returns: entities (List[Entity]): List of Entity Objects \"\"\" return ListNameStatus ( self . _stub , \"entity\" ) def list_sources ( self ): \"\"\"List all sources. Prints a list of all sources. **Examples:** ``` py title=\"Input\" sources_list = rc.list_sources() ``` ``` json title=\"Output\" // list_sources prints out formatted information on all sources NAME VARIANT STATUS DESCRIPTION average_user_transaction quickstart (default) NO_STATUS the average transaction amount for a user transactions kaggle (default) NO_STATUS Fraud Dataset From Kaggle ``` ``` py title=\"Input\" print(sources_list) ``` ``` json title=\"Output\" // list_sources returns a list of Source objects [name: \"average_user_transaction\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"transactions\" default_variant: \"kaggle\" variants: \"kaggle\" ] ``` Returns: sources (List[Source]): List of Source Objects \"\"\" return ListNameVariantStatusDesc ( self . _stub , \"source\" ) def list_training_sets ( self ): \"\"\"List all training sets. Prints a list of all training sets. **Examples:** ``` py title=\"Input\" training_sets_list = rc.list_training_sets() ``` ``` json title=\"Output\" // list_training_sets prints out formatted information on all training sets NAME VARIANT STATUS DESCRIPTION fraud_training quickstart (default) READY Training set for fraud detection. fraud_training v2 CREATED Improved training set for fraud detection. recommender v1 (default) CREATED Training set for recommender system. ``` ``` py title=\"Input\" print(training_sets_list) ``` ``` json title=\"Output\" // list_training_sets returns a list of TrainingSet objects [name: \"fraud_training\" default_variant: \"quickstart\" variants: \"quickstart\", \"v2\", name: \"recommender\" default_variant: \"v1\" variants: \"v1\" ] ``` Returns: training_sets (List[TrainingSet]): List of TrainingSet Objects \"\"\" return ListNameVariantStatusDesc ( self . _stub , \"training-set\" ) def list_models ( self ): \"\"\"List all models. Prints a list of all models. Returns: models (List[Model]): List of Model Objects \"\"\" return ListNameStatusDesc ( self . _stub , \"model\" ) def list_providers ( self ): \"\"\"List all providers. Prints a list of all providers. **Examples:** ``` py title=\"Input\" providers_list = rc.list_providers() ``` ``` json title=\"Output\" // list_providers prints out formatted information on all providers NAME STATUS DESCRIPTION redis-quickstart CREATED A Redis deployment we created for the Featureform quickstart postgres-quickstart CREATED A Postgres deployment we created for the Featureform quickst ``` ``` py title=\"Input\" print(providers_list) ``` ``` json title=\"Output\" // list_providers returns a list of Providers objects [name: \"redis-quickstart\" description: \"A Redis deployment we created for the Featureform quickstart\" type: \"REDIS_ONLINE\" software: \"redis\" serialized_config: \"{\\\"Addr\\\": \\\"quickstart-redis:6379\\\", \\\"Password\\\": \\\"\\\", \\\"DB\\\": 0}\" features { name: \"avg_transactions\" variant: \"quickstart\" } features { name: \"avg_transactions\" variant: \"production\" } features { name: \"user_age\" variant: \"quickstart\" } , name: \"postgres-quickstart\" description: \"A Postgres deployment we created for the Featureform quickstart\" type: \"POSTGRES_OFFLINE\" software: \"postgres\" serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\" sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } ] ``` Returns: providers (List[Provider]): List of Provider Objects \"\"\" return ListNameStatusDesc ( self . _stub , \"provider\" ) __init__ ( host , tls_verify = True , cert_path = None ) Initialise a Resource Client object. Parameters: Name Type Description Default host str Host path required tls_verify bool If true, do TLS verification True cert_path str Path to certificate None Source code in src\\featureform\\register.py 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 def __init__ ( self , host , tls_verify = True , cert_path = None ): \"\"\"Initialise a Resource Client object. Args: host (str): Host path tls_verify (bool): If true, do TLS verification cert_path (str): Path to certificate \"\"\" super () . __init__ () env_cert_path = os . getenv ( 'FEATUREFORM_CERT' ) if tls_verify : credentials = grpc . ssl_channel_credentials () channel = grpc . secure_channel ( host , credentials ) elif cert_path is not None or env_cert_path is not None : if env_cert_path is not None and cert_path is None : cert_path = env_cert_path with open ( cert_path , 'rb' ) as f : credentials = grpc . ssl_channel_credentials ( f . read ()) channel = grpc . secure_channel ( host , credentials ) else : channel = grpc . insecure_channel ( host , options = (( 'grpc.enable_http_proxy' , 0 ),)) self . _stub = ff_grpc . ApiStub ( channel ) apply () Apply all definitions, creating and retrieving all specified resources. Source code in src\\featureform\\register.py 1250 1251 1252 1253 def apply ( self ): \"\"\"Apply all definitions, creating and retrieving all specified resources. \"\"\" self . state () . create_all ( self . _stub ) get_entity ( name ) Get an entity. Prints out information on entity, and all resources associated with the entity. Examples: Input entity = rc . get_entity ( \"user\" ) Output // get_entity prints out formatted information on entity ENTITY NAME : user STATUS : NO_STATUS ----------------------------------------------- NAME VARIANT TYPE avg_ transa c t io ns quicks tart feature frau dule nt quicks tart label frau d_ tra i n i n g quicks tart tra i n i n g se t ----------------------------------------------- Input print ( postgres ) Output // get_entity returns the Entity object na me : \"user\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } Parameters: Name Type Description Default name str Name of entity to be retrieved required Returns: Name Type Description entity Entity Entity Source code in src\\featureform\\register.py 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 def get_entity ( self , name ): \"\"\"Get an entity. Prints out information on entity, and all resources associated with the entity. **Examples:** ``` py title=\"Input\" entity = rc.get_entity(\"user\") ``` ``` json title=\"Output\" // get_entity prints out formatted information on entity ENTITY NAME: user STATUS: NO_STATUS ----------------------------------------------- NAME VARIANT TYPE avg_transactions quickstart feature fraudulent quickstart label fraud_training quickstart training set ----------------------------------------------- ``` ``` py title=\"Input\" print(postgres) ``` ``` json title=\"Output\" // get_entity returns the Entity object name: \"user\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } ``` Args: name (str): Name of entity to be retrieved Returns: entity (Entity): Entity \"\"\" return GetEntity ( self . _stub , name ) get_feature ( name , variant = None ) Get a feature. Prints out information on feature, and all variants associated with the feature. If variant is included, print information on that specific variant and all resources associated with it. Examples: Input avg_transactions = rc . get_feature ( \"avg_transactions\" ) Output // get_feature prints out formatted information on feature NAME : avg_ transa c t io ns STATUS : NO_STATUS ----------------------------------------------- VARIANTS : quicks tart de fault ----------------------------------------------- Input print ( avg_transactions ) Output // get_feature returns the Feature object na me : \"avg_transactions\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" Input avg_transactions_variant = ff . get_feature ( \"avg_transactions\" , \"quickstart\" ) Output // get_feature with variant provided prints out formatted information on feature variant NAME : avg_ transa c t io ns VARIANT : quicks tart TYPE : fl oa t 32 ENTITY : user OWNER : featuref ormer PROVIDER : redis - quicks tart STATUS : NO_STATUS ----------------------------------------------- SOURCE : NAME VARIANT average_user_ transa c t io n quicks tart ----------------------------------------------- TRAINING SETS : NAME VARIANT frau d_ tra i n i n g quicks tart ----------------------------------------------- Input print ( avg_transactions_variant ) Output // get_feature returns the FeatureVariant object na me : \"avg_transactions\" varia nt : \"quickstart\" source { na me : \"average_user_transaction\" varia nt : \"quickstart\" } t ype : \"float32\" e nt i t y : \"user\" crea te d { seco n ds : 1658168552 nan os : 142461900 } ow ner : \"featureformer\" provider : \"redis-quickstart\" tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } colum ns { e nt i t y : \"user_id\" value : \"avg_transaction_amt\" } Parameters: Name Type Description Default name str Name of feature to be retrieved required variant str Name of variant of feature None Returns: Name Type Description feature Union [ Feature , FeatureVariant ] Feature or FeatureVariant Source code in src\\featureform\\register.py 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 def get_feature ( self , name , variant = None ): \"\"\"Get a feature. Prints out information on feature, and all variants associated with the feature. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" avg_transactions = rc.get_feature(\"avg_transactions\") ``` ``` json title=\"Output\" // get_feature prints out formatted information on feature NAME: avg_transactions STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(avg_transactions) ``` ``` json title=\"Output\" // get_feature returns the Feature object name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" avg_transactions_variant = ff.get_feature(\"avg_transactions\", \"quickstart\") ``` ``` json title=\"Output\" // get_feature with variant provided prints out formatted information on feature variant NAME: avg_transactions VARIANT: quickstart TYPE: float32 ENTITY: user OWNER: featureformer PROVIDER: redis-quickstart STATUS: NO_STATUS ----------------------------------------------- SOURCE: NAME VARIANT average_user_transaction quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(avg_transactions_variant) ``` ``` json title=\"Output\" // get_feature returns the FeatureVariant object name: \"avg_transactions\" variant: \"quickstart\" source { name: \"average_user_transaction\" variant: \"quickstart\" } type: \"float32\" entity: \"user\" created { seconds: 1658168552 nanos: 142461900 } owner: \"featureformer\" provider: \"redis-quickstart\" trainingsets { name: \"fraud_training\" variant: \"quickstart\" } columns { entity: \"user_id\" value: \"avg_transaction_amt\" } ``` Args: name (str): Name of feature to be retrieved variant (str): Name of variant of feature Returns: feature (Union[Feature, FeatureVariant]): Feature or FeatureVariant \"\"\" if not variant : return GetResource ( self . _stub , \"feature\" , name ) return GetFeatureVariant ( self . _stub , name , variant ) get_label ( name , variant = None ) Get a label. Prints out information on label, and all variants associated with the label. If variant is included, print information on that specific variant and all resources associated with it. Examples: Input fraudulent = rc . get_label ( \"fraudulent\" ) Output // get_label prints out formatted information on label NAME : frau dule nt STATUS : NO_STATUS ----------------------------------------------- VARIANTS : quicks tart de fault ----------------------------------------------- Input print ( fraudulent ) Output // get_label returns the Label object na me : \"fraudulent\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" Input fraudulent_variant = ff . get_label ( \"fraudulent\" , \"quickstart\" ) Output // get_label with variant provided prints out formatted information on label variant NAME : frau dule nt VARIANT : quicks tart TYPE : bool ENTITY : user OWNER : featuref ormer PROVIDER : pos t gres - quicks tart STATUS : NO_STATUS ----------------------------------------------- SOURCE : NAME VARIANT transa c t io ns kaggle ----------------------------------------------- TRAINING SETS : NAME VARIANT frau d_ tra i n i n g quicks tart ----------------------------------------------- Input print ( fraudulent_variant ) Output // get_label returns the LabelVariant object na me : \"fraudulent\" varia nt : \"quickstart\" t ype : \"bool\" source { na me : \"transactions\" varia nt : \"kaggle\" } e nt i t y : \"user\" crea te d { seco n ds : 1658168552 nan os : 154924300 } ow ner : \"featureformer\" provider : \"postgres-quickstart\" tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } colum ns { e nt i t y : \"customerid\" value : \"isfraud\" } Parameters: Name Type Description Default name str Name of label to be retrieved required variant str Name of variant of label None Returns: Name Type Description label Union [ label , LabelVariant ] Label or LabelVariant Source code in src\\featureform\\register.py 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 def get_label ( self , name , variant = None ): \"\"\"Get a label. Prints out information on label, and all variants associated with the label. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" fraudulent = rc.get_label(\"fraudulent\") ``` ``` json title=\"Output\" // get_label prints out formatted information on label NAME: fraudulent STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent) ``` ``` json title=\"Output\" // get_label returns the Label object name: \"fraudulent\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" fraudulent_variant = ff.get_label(\"fraudulent\", \"quickstart\") ``` ``` json title=\"Output\" // get_label with variant provided prints out formatted information on label variant NAME: fraudulent VARIANT: quickstart TYPE: bool ENTITY: user OWNER: featureformer PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- SOURCE: NAME VARIANT transactions kaggle ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent_variant) ``` ``` json title=\"Output\" // get_label returns the LabelVariant object name: \"fraudulent\" variant: \"quickstart\" type: \"bool\" source { name: \"transactions\" variant: \"kaggle\" } entity: \"user\" created { seconds: 1658168552 nanos: 154924300 } owner: \"featureformer\" provider: \"postgres-quickstart\" trainingsets { name: \"fraud_training\" variant: \"quickstart\" } columns { entity: \"customerid\" value: \"isfraud\" } ``` Args: name (str): Name of label to be retrieved variant (str): Name of variant of label Returns: label (Union[label, LabelVariant]): Label or LabelVariant \"\"\" if not variant : return GetResource ( self . _stub , \"label\" , name ) return GetLabelVariant ( self . _stub , name , variant ) get_model ( name ) Get a model. Prints out information on model, and all resources associated with the model. Parameters: Name Type Description Default name str Name of model to be retrieved required Returns: Name Type Description model Model Model Source code in src\\featureform\\register.py 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 def get_model ( self , name ): \"\"\"Get a model. Prints out information on model, and all resources associated with the model. Args: name (str): Name of model to be retrieved Returns: model (Model): Model \"\"\" return GetResource ( self . _stub , \"model\" , name ) get_provider ( name ) Get a provider. Prints out information on provider, and all resources associated with the provider. Examples: Input postgres = rc . get_provider ( \"postgres-quickstart\" ) Output // get_provider prints out formatted information on provider NAME : pos t gres - quicks tart DESCRIPTION : A Pos t gres deployme nt we crea te d f or t he Fea turef orm quicks tart TYPE : POSTGRES_OFFLINE SOFTWARE : pos t gres STATUS : NO_STATUS ----------------------------------------------- SOURCES : NAME VARIANT transa c t io ns kaggle average_user_ transa c t io n quicks tart ----------------------------------------------- FEATURES : NAME VARIANT ----------------------------------------------- LABELS : NAME VARIANT frau dule nt quicks tart ----------------------------------------------- TRAINING SETS : NAME VARIANT frau d_ tra i n i n g quicks tart ----------------------------------------------- Input print ( postgres ) Output // get_provider returns the Provider object na me : \"postgres-quickstart\" descrip t io n : \"A Postgres deployment we created for the Featureform quickstart\" t ype : \"POSTGRES_OFFLINE\" so ft ware : \"postgres\" serialized_co nf ig : \"{\" Hos t \": \" quicks tart - pos t gres \", \" Por t \": \" 5432 \", \" User na me \": \" pos t gres \", \" Password \": \" password \", \" Da ta base \": \" pos t gres \"}\" sources { na me : \"transactions\" varia nt : \"kaggle\" } sources { na me : \"average_user_transaction\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } Parameters: Name Type Description Default name str Name of provider to be retrieved required Returns: Name Type Description provider Provider Provider Source code in src\\featureform\\register.py 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 def get_provider ( self , name ): \"\"\"Get a provider. Prints out information on provider, and all resources associated with the provider. **Examples:** ``` py title=\"Input\" postgres = rc.get_provider(\"postgres-quickstart\") ``` ``` json title=\"Output\" // get_provider prints out formatted information on provider NAME: postgres-quickstart DESCRIPTION: A Postgres deployment we created for the Featureform quickstart TYPE: POSTGRES_OFFLINE SOFTWARE: postgres STATUS: NO_STATUS ----------------------------------------------- SOURCES: NAME VARIANT transactions kaggle average_user_transaction quickstart ----------------------------------------------- FEATURES: NAME VARIANT ----------------------------------------------- LABELS: NAME VARIANT fraudulent quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(postgres) ``` ``` json title=\"Output\" // get_provider returns the Provider object name: \"postgres-quickstart\" description: \"A Postgres deployment we created for the Featureform quickstart\" type: \"POSTGRES_OFFLINE\" software: \"postgres\" serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\" sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } ``` Args: name (str): Name of provider to be retrieved Returns: provider (Provider): Provider \"\"\" return GetProvider ( self . _stub , name ) get_source ( name , variant = None ) Get a source. Prints out information on source, and all variants associated with the source. If variant is included, print information on that specific variant and all resources associated with it. Examples: Input transactions = rc . get_transactions ( \"transactions\" ) Output // get_source prints out formatted information on source NAME : transa c t io ns STATUS : NO_STATUS ----------------------------------------------- VARIANTS : kaggle de fault ----------------------------------------------- Input print ( transactions ) Output // get_source returns the Source object na me : \"transactions\" de fault _varia nt : \"kaggle\" varia nts : \"kaggle\" Input transactions_variant = rc . get_source ( \"transactions\" , \"kaggle\" ) Output // get_source with variant provided prints out formatted information on source variant NAME : transa c t io ns VARIANT : kaggle OWNER : featuref ormer DESCRIPTION : Fraud Da taset From Kaggle PROVIDER : pos t gres - quicks tart STATUS : NO_STATUS ----------------------------------------------- DEFINITION : TRANSFORMATION ----------------------------------------------- SOURCES NAME VARIANT ----------------------------------------------- PRIMARY DATA Tra nsa c t io ns FEATURES : NAME VARIANT ----------------------------------------------- LABELS : NAME VARIANT frau dule nt quicks tart ----------------------------------------------- TRAINING SETS : NAME VARIANT frau d_ tra i n i n g quicks tart ----------------------------------------------- Input print ( transactions_variant ) Output // get_source returns the SourceVariant object na me : \"transactions\" varia nt : \"kaggle\" ow ner : \"featureformer\" descrip t io n : \"Fraud Dataset From Kaggle\" provider : \"postgres-quickstart\" crea te d { seco n ds : 1658168552 nan os : 128768000 } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } primaryDa ta { ta ble { na me : \"Transactions\" } } Parameters: Name Type Description Default name str Name of source to be retrieved required variant str Name of variant of source None Returns: Name Type Description source Union [ Source , SourceVariant ] Source or SourceVariant Source code in src\\featureform\\register.py 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 def get_source ( self , name , variant = None ): \"\"\"Get a source. Prints out information on source, and all variants associated with the source. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" transactions = rc.get_transactions(\"transactions\") ``` ``` json title=\"Output\" // get_source prints out formatted information on source NAME: transactions STATUS: NO_STATUS ----------------------------------------------- VARIANTS: kaggle default ----------------------------------------------- ``` ``` py title=\"Input\" print(transactions) ``` ``` json title=\"Output\" // get_source returns the Source object name: \"transactions\" default_variant: \"kaggle\" variants: \"kaggle\" ``` ``` py title=\"Input\" transactions_variant = rc.get_source(\"transactions\", \"kaggle\") ``` ``` json title=\"Output\" // get_source with variant provided prints out formatted information on source variant NAME: transactions VARIANT: kaggle OWNER: featureformer DESCRIPTION: Fraud Dataset From Kaggle PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- DEFINITION: TRANSFORMATION ----------------------------------------------- SOURCES NAME VARIANT ----------------------------------------------- PRIMARY DATA Transactions FEATURES: NAME VARIANT ----------------------------------------------- LABELS: NAME VARIANT fraudulent quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(transactions_variant) ``` ``` json title=\"Output\" // get_source returns the SourceVariant object name: \"transactions\" variant: \"kaggle\" owner: \"featureformer\" description: \"Fraud Dataset From Kaggle\" provider: \"postgres-quickstart\" created { seconds: 1658168552 nanos: 128768000 } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } primaryData { table { name: \"Transactions\" } } ``` Args: name (str): Name of source to be retrieved variant (str): Name of variant of source Returns: source (Union[Source, SourceVariant]): Source or SourceVariant \"\"\" if not variant : return GetResource ( self . _stub , \"source\" , name ) return GetSourceVariant ( self . _stub , name , variant ) get_training_set ( name , variant = None ) Get a training set. Prints out information on training set, and all variants associated with the training set. If variant is included, print information on that specific variant and all resources associated with it. Examples: Input fraud_training = rc . get_training_set ( \"fraud_training\" ) Output // get_training_set prints out formatted information on training set NAME : frau d_ tra i n i n g STATUS : NO_STATUS ----------------------------------------------- VARIANTS : quicks tart de fault ----------------------------------------------- Input print ( fraud_training ) Output // get_training_set returns the TrainingSet object na me : \"fraud_training\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" Input fraudulent_variant = ff . get_training set ( \"fraudulent\" , \"quickstart\" ) Output // get_training_set with variant provided prints out formatted information on training set variant NAME : frau d_ tra i n i n g VARIANT : quicks tart OWNER : featuref ormer PROVIDER : pos t gres - quicks tart STATUS : NO_STATUS ----------------------------------------------- LABEL : NAME VARIANT frau dule nt quicks tart ----------------------------------------------- FEATURES : NAME VARIANT avg_ transa c t io ns quicks tart ----------------------------------------------- Input print ( fraudulent_variant ) Output // get_training_set returns the TrainingSetVariant object na me : \"fraud_training\" varia nt : \"quickstart\" ow ner : \"featureformer\" crea te d { seco n ds : 1658168552 nan os : 157934800 } provider : \"postgres-quickstart\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } label { na me : \"fraudulent\" varia nt : \"quickstart\" } Parameters: Name Type Description Default name str Name of training set to be retrieved required variant str Name of variant of training set None Returns: Name Type Description training_set Union [ TrainingSet , TrainingSetVariant ] TrainingSet or TrainingSetVariant Source code in src\\featureform\\register.py 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 def get_training_set ( self , name , variant = None ): \"\"\"Get a training set. Prints out information on training set, and all variants associated with the training set. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" fraud_training = rc.get_training_set(\"fraud_training\") ``` ``` json title=\"Output\" // get_training_set prints out formatted information on training set NAME: fraud_training STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(fraud_training) ``` ``` json title=\"Output\" // get_training_set returns the TrainingSet object name: \"fraud_training\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" fraudulent_variant = ff.get_training set(\"fraudulent\", \"quickstart\") ``` ``` json title=\"Output\" // get_training_set with variant provided prints out formatted information on training set variant NAME: fraud_training VARIANT: quickstart OWNER: featureformer PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- LABEL: NAME VARIANT fraudulent quickstart ----------------------------------------------- FEATURES: NAME VARIANT avg_transactions quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent_variant) ``` ``` json title=\"Output\" // get_training_set returns the TrainingSetVariant object name: \"fraud_training\" variant: \"quickstart\" owner: \"featureformer\" created { seconds: 1658168552 nanos: 157934800 } provider: \"postgres-quickstart\" features { name: \"avg_transactions\" variant: \"quickstart\" } label { name: \"fraudulent\" variant: \"quickstart\" } ``` Args: name (str): Name of training set to be retrieved variant (str): Name of variant of training set Returns: training_set (Union[TrainingSet, TrainingSetVariant]): TrainingSet or TrainingSetVariant \"\"\" if not variant : return GetResource ( self . _stub , \"training-set\" , name ) return GetTrainingSetVariant ( self . _stub , name , variant ) get_user ( name ) Get a user. Prints out name of user, and all resources associated with the user. Examples: Input featureformer = rc . get_user ( \"featureformer\" ) Output // get_user prints out formatted information on user USER NAME : featuref ormer ----------------------------------------------- NAME VARIANT TYPE avg_ transa c t io ns quicks tart feature frau dule nt quicks tart label frau d_ tra i n i n g quicks tart tra i n i n g se t transa c t io ns kaggle source average_user_ transa c t io n quicks tart source ----------------------------------------------- Input print ( featureformer ) Output // get_user returns the User object na me : \"featureformer\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } sources { na me : \"transactions\" varia nt : \"kaggle\" } sources { na me : \"average_user_transaction\" varia nt : \"quickstart\" } Parameters: Name Type Description Default name str Name of user to be retrieved required Returns: Name Type Description user User User Source code in src\\featureform\\register.py 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 def get_user ( self , name ): \"\"\"Get a user. Prints out name of user, and all resources associated with the user. **Examples:** ``` py title=\"Input\" featureformer = rc.get_user(\"featureformer\") ``` ``` json title=\"Output\" // get_user prints out formatted information on user USER NAME: featureformer ----------------------------------------------- NAME VARIANT TYPE avg_transactions quickstart feature fraudulent quickstart label fraud_training quickstart training set transactions kaggle source average_user_transaction quickstart source ----------------------------------------------- ``` ``` py title=\"Input\" print(featureformer) ``` ``` json title=\"Output\" // get_user returns the User object name: \"featureformer\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } ``` Args: name (str): Name of user to be retrieved Returns: user (User): User \"\"\" return GetUser ( self . _stub , name ) list_entities () List all entities. Prints a list of all entities. Examples: Input entities = rc . list_entities () Output // list_entities prints out formatted information on all entities NAME STATUS user CREATED transa c t io n CREATED Input print ( features_list ) Output // list_entities returns a list of Entity objects [ na me : \"user\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } features { na me : \"avg_transactions\" varia nt : \"production\" } features { na me : \"user_age\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } , na me : \"transaction\" features { na me : \"amount_spent\" varia nt : \"production\" } ] Returns: Name Type Description entities List [ Entity ] List of Entity Objects Source code in src\\featureform\\register.py 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 def list_entities ( self ): \"\"\"List all entities. Prints a list of all entities. **Examples:** ``` py title=\"Input\" entities = rc.list_entities() ``` ``` json title=\"Output\" // list_entities prints out formatted information on all entities NAME STATUS user CREATED transaction CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_entities returns a list of Entity objects [name: \"user\" features { name: \"avg_transactions\" variant: \"quickstart\" } features { name: \"avg_transactions\" variant: \"production\" } features { name: \"user_age\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } , name: \"transaction\" features { name: \"amount_spent\" variant: \"production\" } ] ``` Returns: entities (List[Entity]): List of Entity Objects \"\"\" return ListNameStatus ( self . _stub , \"entity\" ) list_features () List all features. Examples: Input features_list = rc . list_features () Output // list_features prints out formatted information on all features NAME VARIANT STATUS user_age quicks tart (de fault ) READY avg_ transa c t io ns quicks tart (de fault ) READY avg_ transa c t io ns produc t io n CREATED Input print ( features_list ) Output // list_features returns a list of Feature objects [ na me : \"user_age\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" , na me : \"avg_transactions\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" varia nts : \"production\" ] Returns: Name Type Description features List [ Feature ] List of Feature Objects Source code in src\\featureform\\register.py 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 def list_features ( self ): \"\"\"List all features. **Examples:** ``` py title=\"Input\" features_list = rc.list_features() ``` ``` json title=\"Output\" // list_features prints out formatted information on all features NAME VARIANT STATUS user_age quickstart (default) READY avg_transactions quickstart (default) READY avg_transactions production CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"user_age\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" variants: \"production\" ] ``` Returns: features (List[Feature]): List of Feature Objects \"\"\" return ListNameVariantStatus ( self . _stub , \"feature\" ) list_labels () List all labels. Examples: Input features_list = rc . list_labels () Output // list_labels prints out formatted information on all labels NAME VARIANT STATUS user_age quicks tart (de fault ) READY avg_ transa c t io ns quicks tart (de fault ) READY avg_ transa c t io ns produc t io n CREATED Input print ( label_list ) Output // list_features returns a list of Feature objects [ na me : \"user_age\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" , na me : \"avg_transactions\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" varia nts : \"production\" ] Returns: Name Type Description labels List [ Label ] List of Label Objects Source code in src\\featureform\\register.py 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 def list_labels ( self ): \"\"\"List all labels. **Examples:** ``` py title=\"Input\" features_list = rc.list_labels() ``` ``` json title=\"Output\" // list_labels prints out formatted information on all labels NAME VARIANT STATUS user_age quickstart (default) READY avg_transactions quickstart (default) READY avg_transactions production CREATED ``` ``` py title=\"Input\" print(label_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"user_age\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" variants: \"production\" ] ``` Returns: labels (List[Label]): List of Label Objects \"\"\" return ListNameVariantStatus ( self . _stub , \"label\" ) list_models () List all models. Prints a list of all models. Returns: Name Type Description models List [ Model ] List of Model Objects Source code in src\\featureform\\register.py 2131 2132 2133 2134 2135 2136 2137 def list_models ( self ): \"\"\"List all models. Prints a list of all models. Returns: models (List[Model]): List of Model Objects \"\"\" return ListNameStatusDesc ( self . _stub , \"model\" ) list_providers () List all providers. Prints a list of all providers. Examples: Input providers_list = rc . list_providers () Output // list_providers prints out formatted information on all providers NAME STATUS DESCRIPTION redis - quicks tart CREATED A Redis deployme nt we crea te d f or t he Fea turef orm quicks tart pos t gres - quicks tart CREATED A Pos t gres deployme nt we crea te d f or t he Fea turef orm quicks t Input print ( providers_list ) Output // list_providers returns a list of Providers objects [ na me : \"redis-quickstart\" descrip t io n : \"A Redis deployment we created for the Featureform quickstart\" t ype : \"REDIS_ONLINE\" so ft ware : \"redis\" serialized_co nf ig : \"{\" Addr \": \" quicks tart - redis : 6379 \", \" Password \": \"\", \" DB \": 0}\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } features { na me : \"avg_transactions\" varia nt : \"production\" } features { na me : \"user_age\" varia nt : \"quickstart\" } , na me : \"postgres-quickstart\" descrip t io n : \"A Postgres deployment we created for the Featureform quickstart\" t ype : \"POSTGRES_OFFLINE\" so ft ware : \"postgres\" serialized_co nf ig : \"{\" Hos t \": \" quicks tart - pos t gres \", \" Por t \": \" 5432 \", \" User na me \": \" pos t gres \", \" Password \": \" password \", \" Da ta base \": \" pos t gres \"}\" sources { na me : \"transactions\" varia nt : \"kaggle\" } sources { na me : \"average_user_transaction\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } ] Returns: Name Type Description providers List [ Provider ] List of Provider Objects Source code in src\\featureform\\register.py 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 def list_providers ( self ): \"\"\"List all providers. Prints a list of all providers. **Examples:** ``` py title=\"Input\" providers_list = rc.list_providers() ``` ``` json title=\"Output\" // list_providers prints out formatted information on all providers NAME STATUS DESCRIPTION redis-quickstart CREATED A Redis deployment we created for the Featureform quickstart postgres-quickstart CREATED A Postgres deployment we created for the Featureform quickst ``` ``` py title=\"Input\" print(providers_list) ``` ``` json title=\"Output\" // list_providers returns a list of Providers objects [name: \"redis-quickstart\" description: \"A Redis deployment we created for the Featureform quickstart\" type: \"REDIS_ONLINE\" software: \"redis\" serialized_config: \"{\\\"Addr\\\": \\\"quickstart-redis:6379\\\", \\\"Password\\\": \\\"\\\", \\\"DB\\\": 0}\" features { name: \"avg_transactions\" variant: \"quickstart\" } features { name: \"avg_transactions\" variant: \"production\" } features { name: \"user_age\" variant: \"quickstart\" } , name: \"postgres-quickstart\" description: \"A Postgres deployment we created for the Featureform quickstart\" type: \"POSTGRES_OFFLINE\" software: \"postgres\" serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\" sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } ] ``` Returns: providers (List[Provider]): List of Provider Objects \"\"\" return ListNameStatusDesc ( self . _stub , \"provider\" ) list_sources () List all sources. Prints a list of all sources. Examples: Input sources_list = rc . list_sources () Output // list_sources prints out formatted information on all sources NAME VARIANT STATUS DESCRIPTION average_user_ transa c t io n quicks tart (de fault ) NO_STATUS t he average transa c t io n amou nt f or a user transa c t io ns kaggle (de fault ) NO_STATUS Fraud Da taset From Kaggle Input print ( sources_list ) Output // list_sources returns a list of Source objects [ na me : \"average_user_transaction\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" , na me : \"transactions\" de fault _varia nt : \"kaggle\" varia nts : \"kaggle\" ] Returns: Name Type Description sources List [ Source ] List of Source Objects Source code in src\\featureform\\register.py 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 def list_sources ( self ): \"\"\"List all sources. Prints a list of all sources. **Examples:** ``` py title=\"Input\" sources_list = rc.list_sources() ``` ``` json title=\"Output\" // list_sources prints out formatted information on all sources NAME VARIANT STATUS DESCRIPTION average_user_transaction quickstart (default) NO_STATUS the average transaction amount for a user transactions kaggle (default) NO_STATUS Fraud Dataset From Kaggle ``` ``` py title=\"Input\" print(sources_list) ``` ``` json title=\"Output\" // list_sources returns a list of Source objects [name: \"average_user_transaction\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"transactions\" default_variant: \"kaggle\" variants: \"kaggle\" ] ``` Returns: sources (List[Source]): List of Source Objects \"\"\" return ListNameVariantStatusDesc ( self . _stub , \"source\" ) list_training_sets () List all training sets. Prints a list of all training sets. Examples: Input training_sets_list = rc . list_training_sets () Output // list_training_sets prints out formatted information on all training sets NAME VARIANT STATUS DESCRIPTION frau d_ tra i n i n g quicks tart (de fault ) READY Trai n i n g se t f or frau d de te c t io n . frau d_ tra i n i n g v 2 CREATED Improved tra i n i n g se t f or frau d de te c t io n . recomme n der v 1 (de fault ) CREATED Trai n i n g se t f or recomme n der sys te m. Input print ( training_sets_list ) Output // list_training_sets returns a list of TrainingSet objects [ na me : \"fraud_training\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" , \"v2\" , na me : \"recommender\" de fault _varia nt : \"v1\" varia nts : \"v1\" ] Returns: Name Type Description training_sets List [ TrainingSet ] List of TrainingSet Objects Source code in src\\featureform\\register.py 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 def list_training_sets ( self ): \"\"\"List all training sets. Prints a list of all training sets. **Examples:** ``` py title=\"Input\" training_sets_list = rc.list_training_sets() ``` ``` json title=\"Output\" // list_training_sets prints out formatted information on all training sets NAME VARIANT STATUS DESCRIPTION fraud_training quickstart (default) READY Training set for fraud detection. fraud_training v2 CREATED Improved training set for fraud detection. recommender v1 (default) CREATED Training set for recommender system. ``` ``` py title=\"Input\" print(training_sets_list) ``` ``` json title=\"Output\" // list_training_sets returns a list of TrainingSet objects [name: \"fraud_training\" default_variant: \"quickstart\" variants: \"quickstart\", \"v2\", name: \"recommender\" default_variant: \"v1\" variants: \"v1\" ] ``` Returns: training_sets (List[TrainingSet]): List of TrainingSet Objects \"\"\" return ListNameVariantStatusDesc ( self . _stub , \"training-set\" ) list_users () List all users. Prints a list of all users. Examples: Input users_list = rc . list_users () Output // list_users prints out formatted information on all users NAME STATUS featuref ormer NO_STATUS featuref ormers_ fr ie n d CREATED Input print ( features_list ) Output // list_features returns a list of Feature objects [ na me : \"featureformer\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } sources { na me : \"transactions\" varia nt : \"kaggle\" } sources { na me : \"average_user_transaction\" varia nt : \"quickstart\" }, na me : \"featureformers_friend\" features { na me : \"user_age\" varia nt : \"production\" } sources { na me : \"user_profiles\" varia nt : \"production\" } ] Returns: Name Type Description users List [ User ] List of User Objects Source code in src\\featureform\\register.py 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 def list_users ( self ): \"\"\"List all users. Prints a list of all users. **Examples:** ``` py title=\"Input\" users_list = rc.list_users() ``` ``` json title=\"Output\" // list_users prints out formatted information on all users NAME STATUS featureformer NO_STATUS featureformers_friend CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"featureformer\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" }, name: \"featureformers_friend\" features { name: \"user_age\" variant: \"production\" } sources { name: \"user_profiles\" variant: \"production\" } ] ``` Returns: users (List[User]): List of User Objects \"\"\" return ListNameStatus ( self . _stub , \"user\" )","title":"Resource Client"},{"location":"resource_client/#resource-client","text":"Bases: Registrar The resource client is used to retrieve information on specific resources (entities, providers, features, labels, training sets, models, users). If retrieved resources are needed to register additional resources (e.g. registering a feature from a source), use the Client functions instead. Using the Resource Client: definitions.py import featureform as ff from featureform import ResourceClient rc = ResourceClient ( \"localhost:8000\" ) # example query: redis = rc . get_provider ( \"redis-quickstart\" ) Source code in src\\featureform\\register.pyclass Client ( Registrar ): \"\"\"The resource client is used to retrieve information on specific resources (entities, providers, features, labels, training sets, models, users). If retrieved resources are needed to register additional resources (e.g. registering a feature from a source), use the [Client](client.md) functions instead. **Using the Resource Client:** ``` py title=\"definitions.py\" import featureform as ff from featureform import ResourceClient rc = ResourceClient(\"localhost:8000\") # example query: redis = rc.get_provider(\"redis-quickstart\") ``` \"\"\" def __init__ ( self , host , tls_verify = True , cert_path = None ): \"\"\"Initialise a Resource Client object. Args: host (str): Host path tls_verify (bool): If true, do TLS verification cert_path (str): Path to certificate \"\"\" super () . __init__ () env_cert_path = os . getenv ( 'FEATUREFORM_CERT' ) if tls_verify : credentials = grpc . ssl_channel_credentials () channel = grpc . secure_channel ( host , credentials ) elif cert_path is not None or env_cert_path is not None : if env_cert_path is not None and cert_path is None : cert_path = env_cert_path with open ( cert_path , 'rb' ) as f : credentials = grpc . ssl_channel_credentials ( f . read ()) channel = grpc . secure_channel ( host , credentials ) else : channel = grpc . insecure_channel ( host , options = (( 'grpc.enable_http_proxy' , 0 ),)) self . _stub = ff_grpc . ApiStub ( channel ) def apply ( self ): \"\"\"Apply all definitions, creating and retrieving all specified resources. \"\"\" self . state () . create_all ( self . _stub ) def get_user ( self , name ): \"\"\"Get a user. Prints out name of user, and all resources associated with the user. **Examples:** ``` py title=\"Input\" featureformer = rc.get_user(\"featureformer\") ``` ``` json title=\"Output\" // get_user prints out formatted information on user USER NAME: featureformer ----------------------------------------------- NAME VARIANT TYPE avg_transactions quickstart feature fraudulent quickstart label fraud_training quickstart training set transactions kaggle source average_user_transaction quickstart source ----------------------------------------------- ``` ``` py title=\"Input\" print(featureformer) ``` ``` json title=\"Output\" // get_user returns the User object name: \"featureformer\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } ``` Args: name (str): Name of user to be retrieved Returns: user (User): User \"\"\" return GetUser ( self . _stub , name ) def get_entity ( self , name ): \"\"\"Get an entity. Prints out information on entity, and all resources associated with the entity. **Examples:** ``` py title=\"Input\" entity = rc.get_entity(\"user\") ``` ``` json title=\"Output\" // get_entity prints out formatted information on entity ENTITY NAME: user STATUS: NO_STATUS ----------------------------------------------- NAME VARIANT TYPE avg_transactions quickstart feature fraudulent quickstart label fraud_training quickstart training set ----------------------------------------------- ``` ``` py title=\"Input\" print(postgres) ``` ``` json title=\"Output\" // get_entity returns the Entity object name: \"user\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } ``` Args: name (str): Name of entity to be retrieved Returns: entity (Entity): Entity \"\"\" return GetEntity ( self . _stub , name ) def get_model ( self , name ): \"\"\"Get a model. Prints out information on model, and all resources associated with the model. Args: name (str): Name of model to be retrieved Returns: model (Model): Model \"\"\" return GetResource ( self . _stub , \"model\" , name ) def get_provider ( self , name ): \"\"\"Get a provider. Prints out information on provider, and all resources associated with the provider. **Examples:** ``` py title=\"Input\" postgres = rc.get_provider(\"postgres-quickstart\") ``` ``` json title=\"Output\" // get_provider prints out formatted information on provider NAME: postgres-quickstart DESCRIPTION: A Postgres deployment we created for the Featureform quickstart TYPE: POSTGRES_OFFLINE SOFTWARE: postgres STATUS: NO_STATUS ----------------------------------------------- SOURCES: NAME VARIANT transactions kaggle average_user_transaction quickstart ----------------------------------------------- FEATURES: NAME VARIANT ----------------------------------------------- LABELS: NAME VARIANT fraudulent quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(postgres) ``` ``` json title=\"Output\" // get_provider returns the Provider object name: \"postgres-quickstart\" description: \"A Postgres deployment we created for the Featureform quickstart\" type: \"POSTGRES_OFFLINE\" software: \"postgres\" serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\" sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } ``` Args: name (str): Name of provider to be retrieved Returns: provider (Provider): Provider \"\"\" return GetProvider ( self . _stub , name ) def get_feature ( self , name , variant = None ): \"\"\"Get a feature. Prints out information on feature, and all variants associated with the feature. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" avg_transactions = rc.get_feature(\"avg_transactions\") ``` ``` json title=\"Output\" // get_feature prints out formatted information on feature NAME: avg_transactions STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(avg_transactions) ``` ``` json title=\"Output\" // get_feature returns the Feature object name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" avg_transactions_variant = ff.get_feature(\"avg_transactions\", \"quickstart\") ``` ``` json title=\"Output\" // get_feature with variant provided prints out formatted information on feature variant NAME: avg_transactions VARIANT: quickstart TYPE: float32 ENTITY: user OWNER: featureformer PROVIDER: redis-quickstart STATUS: NO_STATUS ----------------------------------------------- SOURCE: NAME VARIANT average_user_transaction quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(avg_transactions_variant) ``` ``` json title=\"Output\" // get_feature returns the FeatureVariant object name: \"avg_transactions\" variant: \"quickstart\" source { name: \"average_user_transaction\" variant: \"quickstart\" } type: \"float32\" entity: \"user\" created { seconds: 1658168552 nanos: 142461900 } owner: \"featureformer\" provider: \"redis-quickstart\" trainingsets { name: \"fraud_training\" variant: \"quickstart\" } columns { entity: \"user_id\" value: \"avg_transaction_amt\" } ``` Args: name (str): Name of feature to be retrieved variant (str): Name of variant of feature Returns: feature (Union[Feature, FeatureVariant]): Feature or FeatureVariant \"\"\" if not variant : return GetResource ( self . _stub , \"feature\" , name ) return GetFeatureVariant ( self . _stub , name , variant ) def get_label ( self , name , variant = None ): \"\"\"Get a label. Prints out information on label, and all variants associated with the label. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" fraudulent = rc.get_label(\"fraudulent\") ``` ``` json title=\"Output\" // get_label prints out formatted information on label NAME: fraudulent STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent) ``` ``` json title=\"Output\" // get_label returns the Label object name: \"fraudulent\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" fraudulent_variant = ff.get_label(\"fraudulent\", \"quickstart\") ``` ``` json title=\"Output\" // get_label with variant provided prints out formatted information on label variant NAME: fraudulent VARIANT: quickstart TYPE: bool ENTITY: user OWNER: featureformer PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- SOURCE: NAME VARIANT transactions kaggle ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent_variant) ``` ``` json title=\"Output\" // get_label returns the LabelVariant object name: \"fraudulent\" variant: \"quickstart\" type: \"bool\" source { name: \"transactions\" variant: \"kaggle\" } entity: \"user\" created { seconds: 1658168552 nanos: 154924300 } owner: \"featureformer\" provider: \"postgres-quickstart\" trainingsets { name: \"fraud_training\" variant: \"quickstart\" } columns { entity: \"customerid\" value: \"isfraud\" } ``` Args: name (str): Name of label to be retrieved variant (str): Name of variant of label Returns: label (Union[label, LabelVariant]): Label or LabelVariant \"\"\" if not variant : return GetResource ( self . _stub , \"label\" , name ) return GetLabelVariant ( self . _stub , name , variant ) def get_training_set ( self , name , variant = None ): \"\"\"Get a training set. Prints out information on training set, and all variants associated with the training set. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" fraud_training = rc.get_training_set(\"fraud_training\") ``` ``` json title=\"Output\" // get_training_set prints out formatted information on training set NAME: fraud_training STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(fraud_training) ``` ``` json title=\"Output\" // get_training_set returns the TrainingSet object name: \"fraud_training\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" fraudulent_variant = ff.get_training set(\"fraudulent\", \"quickstart\") ``` ``` json title=\"Output\" // get_training_set with variant provided prints out formatted information on training set variant NAME: fraud_training VARIANT: quickstart OWNER: featureformer PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- LABEL: NAME VARIANT fraudulent quickstart ----------------------------------------------- FEATURES: NAME VARIANT avg_transactions quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent_variant) ``` ``` json title=\"Output\" // get_training_set returns the TrainingSetVariant object name: \"fraud_training\" variant: \"quickstart\" owner: \"featureformer\" created { seconds: 1658168552 nanos: 157934800 } provider: \"postgres-quickstart\" features { name: \"avg_transactions\" variant: \"quickstart\" } label { name: \"fraudulent\" variant: \"quickstart\" } ``` Args: name (str): Name of training set to be retrieved variant (str): Name of variant of training set Returns: training_set (Union[TrainingSet, TrainingSetVariant]): TrainingSet or TrainingSetVariant \"\"\" if not variant : return GetResource ( self . _stub , \"training-set\" , name ) return GetTrainingSetVariant ( self . _stub , name , variant ) def get_source ( self , name , variant = None ): \"\"\"Get a source. Prints out information on source, and all variants associated with the source. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" transactions = rc.get_transactions(\"transactions\") ``` ``` json title=\"Output\" // get_source prints out formatted information on source NAME: transactions STATUS: NO_STATUS ----------------------------------------------- VARIANTS: kaggle default ----------------------------------------------- ``` ``` py title=\"Input\" print(transactions) ``` ``` json title=\"Output\" // get_source returns the Source object name: \"transactions\" default_variant: \"kaggle\" variants: \"kaggle\" ``` ``` py title=\"Input\" transactions_variant = rc.get_source(\"transactions\", \"kaggle\") ``` ``` json title=\"Output\" // get_source with variant provided prints out formatted information on source variant NAME: transactions VARIANT: kaggle OWNER: featureformer DESCRIPTION: Fraud Dataset From Kaggle PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- DEFINITION: TRANSFORMATION ----------------------------------------------- SOURCES NAME VARIANT ----------------------------------------------- PRIMARY DATA Transactions FEATURES: NAME VARIANT ----------------------------------------------- LABELS: NAME VARIANT fraudulent quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(transactions_variant) ``` ``` json title=\"Output\" // get_source returns the SourceVariant object name: \"transactions\" variant: \"kaggle\" owner: \"featureformer\" description: \"Fraud Dataset From Kaggle\" provider: \"postgres-quickstart\" created { seconds: 1658168552 nanos: 128768000 } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } primaryData { table { name: \"Transactions\" } } ``` Args: name (str): Name of source to be retrieved variant (str): Name of variant of source Returns: source (Union[Source, SourceVariant]): Source or SourceVariant \"\"\" if not variant : return GetResource ( self . _stub , \"source\" , name ) return GetSourceVariant ( self . _stub , name , variant ) def list_features ( self ): \"\"\"List all features. **Examples:** ``` py title=\"Input\" features_list = rc.list_features() ``` ``` json title=\"Output\" // list_features prints out formatted information on all features NAME VARIANT STATUS user_age quickstart (default) READY avg_transactions quickstart (default) READY avg_transactions production CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"user_age\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" variants: \"production\" ] ``` Returns: features (List[Feature]): List of Feature Objects \"\"\" return ListNameVariantStatus ( self . _stub , \"feature\" ) def list_labels ( self ): \"\"\"List all labels. **Examples:** ``` py title=\"Input\" features_list = rc.list_labels() ``` ``` json title=\"Output\" // list_labels prints out formatted information on all labels NAME VARIANT STATUS user_age quickstart (default) READY avg_transactions quickstart (default) READY avg_transactions production CREATED ``` ``` py title=\"Input\" print(label_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"user_age\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" variants: \"production\" ] ``` Returns: labels (List[Label]): List of Label Objects \"\"\" return ListNameVariantStatus ( self . _stub , \"label\" ) def list_users ( self ): \"\"\"List all users. Prints a list of all users. **Examples:** ``` py title=\"Input\" users_list = rc.list_users() ``` ``` json title=\"Output\" // list_users prints out formatted information on all users NAME STATUS featureformer NO_STATUS featureformers_friend CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"featureformer\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" }, name: \"featureformers_friend\" features { name: \"user_age\" variant: \"production\" } sources { name: \"user_profiles\" variant: \"production\" } ] ``` Returns: users (List[User]): List of User Objects \"\"\" return ListNameStatus ( self . _stub , \"user\" ) def list_entities ( self ): \"\"\"List all entities. Prints a list of all entities. **Examples:** ``` py title=\"Input\" entities = rc.list_entities() ``` ``` json title=\"Output\" // list_entities prints out formatted information on all entities NAME STATUS user CREATED transaction CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_entities returns a list of Entity objects [name: \"user\" features { name: \"avg_transactions\" variant: \"quickstart\" } features { name: \"avg_transactions\" variant: \"production\" } features { name: \"user_age\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } , name: \"transaction\" features { name: \"amount_spent\" variant: \"production\" } ] ``` Returns: entities (List[Entity]): List of Entity Objects \"\"\" return ListNameStatus ( self . _stub , \"entity\" ) def list_sources ( self ): \"\"\"List all sources. Prints a list of all sources. **Examples:** ``` py title=\"Input\" sources_list = rc.list_sources() ``` ``` json title=\"Output\" // list_sources prints out formatted information on all sources NAME VARIANT STATUS DESCRIPTION average_user_transaction quickstart (default) NO_STATUS the average transaction amount for a user transactions kaggle (default) NO_STATUS Fraud Dataset From Kaggle ``` ``` py title=\"Input\" print(sources_list) ``` ``` json title=\"Output\" // list_sources returns a list of Source objects [name: \"average_user_transaction\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"transactions\" default_variant: \"kaggle\" variants: \"kaggle\" ] ``` Returns: sources (List[Source]): List of Source Objects \"\"\" return ListNameVariantStatusDesc ( self . _stub , \"source\" ) def list_training_sets ( self ): \"\"\"List all training sets. Prints a list of all training sets. **Examples:** ``` py title=\"Input\" training_sets_list = rc.list_training_sets() ``` ``` json title=\"Output\" // list_training_sets prints out formatted information on all training sets NAME VARIANT STATUS DESCRIPTION fraud_training quickstart (default) READY Training set for fraud detection. fraud_training v2 CREATED Improved training set for fraud detection. recommender v1 (default) CREATED Training set for recommender system. ``` ``` py title=\"Input\" print(training_sets_list) ``` ``` json title=\"Output\" // list_training_sets returns a list of TrainingSet objects [name: \"fraud_training\" default_variant: \"quickstart\" variants: \"quickstart\", \"v2\", name: \"recommender\" default_variant: \"v1\" variants: \"v1\" ] ``` Returns: training_sets (List[TrainingSet]): List of TrainingSet Objects \"\"\" return ListNameVariantStatusDesc ( self . _stub , \"training-set\" ) def list_models ( self ): \"\"\"List all models. Prints a list of all models. Returns: models (List[Model]): List of Model Objects \"\"\" return ListNameStatusDesc ( self . _stub , \"model\" ) def list_providers ( self ): \"\"\"List all providers. Prints a list of all providers. **Examples:** ``` py title=\"Input\" providers_list = rc.list_providers() ``` ``` json title=\"Output\" // list_providers prints out formatted information on all providers NAME STATUS DESCRIPTION redis-quickstart CREATED A Redis deployment we created for the Featureform quickstart postgres-quickstart CREATED A Postgres deployment we created for the Featureform quickst ``` ``` py title=\"Input\" print(providers_list) ``` ``` json title=\"Output\" // list_providers returns a list of Providers objects [name: \"redis-quickstart\" description: \"A Redis deployment we created for the Featureform quickstart\" type: \"REDIS_ONLINE\" software: \"redis\" serialized_config: \"{\\\"Addr\\\": \\\"quickstart-redis:6379\\\", \\\"Password\\\": \\\"\\\", \\\"DB\\\": 0}\" features { name: \"avg_transactions\" variant: \"quickstart\" } features { name: \"avg_transactions\" variant: \"production\" } features { name: \"user_age\" variant: \"quickstart\" } , name: \"postgres-quickstart\" description: \"A Postgres deployment we created for the Featureform quickstart\" type: \"POSTGRES_OFFLINE\" software: \"postgres\" serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\" sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } ] ``` Returns: providers (List[Provider]): List of Provider Objects \"\"\" return ListNameStatusDesc ( self . _stub , \"provider\" )","title":"Resource Client"},{"location":"resource_client/#src.featureform.register.Client.__init__","text":"Initialise a Resource Client object. Parameters: Name Type Description Default host str Host path required tls_verify bool If true, do TLS verification True cert_path str Path to certificate None Source code in src\\featureform\\register.py 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 def __init__ ( self , host , tls_verify = True , cert_path = None ): \"\"\"Initialise a Resource Client object. Args: host (str): Host path tls_verify (bool): If true, do TLS verification cert_path (str): Path to certificate \"\"\" super () . __init__ () env_cert_path = os . getenv ( 'FEATUREFORM_CERT' ) if tls_verify : credentials = grpc . ssl_channel_credentials () channel = grpc . secure_channel ( host , credentials ) elif cert_path is not None or env_cert_path is not None : if env_cert_path is not None and cert_path is None : cert_path = env_cert_path with open ( cert_path , 'rb' ) as f : credentials = grpc . ssl_channel_credentials ( f . read ()) channel = grpc . secure_channel ( host , credentials ) else : channel = grpc . insecure_channel ( host , options = (( 'grpc.enable_http_proxy' , 0 ),)) self . _stub = ff_grpc . ApiStub ( channel )","title":"__init__()"},{"location":"resource_client/#src.featureform.register.Client.apply","text":"Apply all definitions, creating and retrieving all specified resources. Source code in src\\featureform\\register.py 1250 1251 1252 1253 def apply ( self ): \"\"\"Apply all definitions, creating and retrieving all specified resources. \"\"\" self . state () . create_all ( self . _stub )","title":"apply()"},{"location":"resource_client/#src.featureform.register.Client.get_entity","text":"Get an entity. Prints out information on entity, and all resources associated with the entity. Examples: Input entity = rc . get_entity ( \"user\" ) Output // get_entity prints out formatted information on entity ENTITY NAME : user STATUS : NO_STATUS ----------------------------------------------- NAME VARIANT TYPE avg_ transa c t io ns quicks tart feature frau dule nt quicks tart label frau d_ tra i n i n g quicks tart tra i n i n g se t ----------------------------------------------- Input print ( postgres ) Output // get_entity returns the Entity object na me : \"user\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } Parameters: Name Type Description Default name str Name of entity to be retrieved required Returns: Name Type Description entity Entity Entity Source code in src\\featureform\\register.py 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 def get_entity ( self , name ): \"\"\"Get an entity. Prints out information on entity, and all resources associated with the entity. **Examples:** ``` py title=\"Input\" entity = rc.get_entity(\"user\") ``` ``` json title=\"Output\" // get_entity prints out formatted information on entity ENTITY NAME: user STATUS: NO_STATUS ----------------------------------------------- NAME VARIANT TYPE avg_transactions quickstart feature fraudulent quickstart label fraud_training quickstart training set ----------------------------------------------- ``` ``` py title=\"Input\" print(postgres) ``` ``` json title=\"Output\" // get_entity returns the Entity object name: \"user\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } ``` Args: name (str): Name of entity to be retrieved Returns: entity (Entity): Entity \"\"\" return GetEntity ( self . _stub , name )","title":"get_entity()"},{"location":"resource_client/#src.featureform.register.Client.get_feature","text":"Get a feature. Prints out information on feature, and all variants associated with the feature. If variant is included, print information on that specific variant and all resources associated with it. Examples: Input avg_transactions = rc . get_feature ( \"avg_transactions\" ) Output // get_feature prints out formatted information on feature NAME : avg_ transa c t io ns STATUS : NO_STATUS ----------------------------------------------- VARIANTS : quicks tart de fault ----------------------------------------------- Input print ( avg_transactions ) Output // get_feature returns the Feature object na me : \"avg_transactions\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" Input avg_transactions_variant = ff . get_feature ( \"avg_transactions\" , \"quickstart\" ) Output // get_feature with variant provided prints out formatted information on feature variant NAME : avg_ transa c t io ns VARIANT : quicks tart TYPE : fl oa t 32 ENTITY : user OWNER : featuref ormer PROVIDER : redis - quicks tart STATUS : NO_STATUS ----------------------------------------------- SOURCE : NAME VARIANT average_user_ transa c t io n quicks tart ----------------------------------------------- TRAINING SETS : NAME VARIANT frau d_ tra i n i n g quicks tart ----------------------------------------------- Input print ( avg_transactions_variant ) Output // get_feature returns the FeatureVariant object na me : \"avg_transactions\" varia nt : \"quickstart\" source { na me : \"average_user_transaction\" varia nt : \"quickstart\" } t ype : \"float32\" e nt i t y : \"user\" crea te d { seco n ds : 1658168552 nan os : 142461900 } ow ner : \"featureformer\" provider : \"redis-quickstart\" tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } colum ns { e nt i t y : \"user_id\" value : \"avg_transaction_amt\" } Parameters: Name Type Description Default name str Name of feature to be retrieved required variant str Name of variant of feature None Returns: Name Type Description feature Union [ Feature , FeatureVariant ] Feature or FeatureVariant Source code in src\\featureform\\register.py 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 def get_feature ( self , name , variant = None ): \"\"\"Get a feature. Prints out information on feature, and all variants associated with the feature. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" avg_transactions = rc.get_feature(\"avg_transactions\") ``` ``` json title=\"Output\" // get_feature prints out formatted information on feature NAME: avg_transactions STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(avg_transactions) ``` ``` json title=\"Output\" // get_feature returns the Feature object name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" avg_transactions_variant = ff.get_feature(\"avg_transactions\", \"quickstart\") ``` ``` json title=\"Output\" // get_feature with variant provided prints out formatted information on feature variant NAME: avg_transactions VARIANT: quickstart TYPE: float32 ENTITY: user OWNER: featureformer PROVIDER: redis-quickstart STATUS: NO_STATUS ----------------------------------------------- SOURCE: NAME VARIANT average_user_transaction quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(avg_transactions_variant) ``` ``` json title=\"Output\" // get_feature returns the FeatureVariant object name: \"avg_transactions\" variant: \"quickstart\" source { name: \"average_user_transaction\" variant: \"quickstart\" } type: \"float32\" entity: \"user\" created { seconds: 1658168552 nanos: 142461900 } owner: \"featureformer\" provider: \"redis-quickstart\" trainingsets { name: \"fraud_training\" variant: \"quickstart\" } columns { entity: \"user_id\" value: \"avg_transaction_amt\" } ``` Args: name (str): Name of feature to be retrieved variant (str): Name of variant of feature Returns: feature (Union[Feature, FeatureVariant]): Feature or FeatureVariant \"\"\" if not variant : return GetResource ( self . _stub , \"feature\" , name ) return GetFeatureVariant ( self . _stub , name , variant )","title":"get_feature()"},{"location":"resource_client/#src.featureform.register.Client.get_label","text":"Get a label. Prints out information on label, and all variants associated with the label. If variant is included, print information on that specific variant and all resources associated with it. Examples: Input fraudulent = rc . get_label ( \"fraudulent\" ) Output // get_label prints out formatted information on label NAME : frau dule nt STATUS : NO_STATUS ----------------------------------------------- VARIANTS : quicks tart de fault ----------------------------------------------- Input print ( fraudulent ) Output // get_label returns the Label object na me : \"fraudulent\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" Input fraudulent_variant = ff . get_label ( \"fraudulent\" , \"quickstart\" ) Output // get_label with variant provided prints out formatted information on label variant NAME : frau dule nt VARIANT : quicks tart TYPE : bool ENTITY : user OWNER : featuref ormer PROVIDER : pos t gres - quicks tart STATUS : NO_STATUS ----------------------------------------------- SOURCE : NAME VARIANT transa c t io ns kaggle ----------------------------------------------- TRAINING SETS : NAME VARIANT frau d_ tra i n i n g quicks tart ----------------------------------------------- Input print ( fraudulent_variant ) Output // get_label returns the LabelVariant object na me : \"fraudulent\" varia nt : \"quickstart\" t ype : \"bool\" source { na me : \"transactions\" varia nt : \"kaggle\" } e nt i t y : \"user\" crea te d { seco n ds : 1658168552 nan os : 154924300 } ow ner : \"featureformer\" provider : \"postgres-quickstart\" tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } colum ns { e nt i t y : \"customerid\" value : \"isfraud\" } Parameters: Name Type Description Default name str Name of label to be retrieved required variant str Name of variant of label None Returns: Name Type Description label Union [ label , LabelVariant ] Label or LabelVariant Source code in src\\featureform\\register.py 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 def get_label ( self , name , variant = None ): \"\"\"Get a label. Prints out information on label, and all variants associated with the label. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" fraudulent = rc.get_label(\"fraudulent\") ``` ``` json title=\"Output\" // get_label prints out formatted information on label NAME: fraudulent STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent) ``` ``` json title=\"Output\" // get_label returns the Label object name: \"fraudulent\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" fraudulent_variant = ff.get_label(\"fraudulent\", \"quickstart\") ``` ``` json title=\"Output\" // get_label with variant provided prints out formatted information on label variant NAME: fraudulent VARIANT: quickstart TYPE: bool ENTITY: user OWNER: featureformer PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- SOURCE: NAME VARIANT transactions kaggle ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent_variant) ``` ``` json title=\"Output\" // get_label returns the LabelVariant object name: \"fraudulent\" variant: \"quickstart\" type: \"bool\" source { name: \"transactions\" variant: \"kaggle\" } entity: \"user\" created { seconds: 1658168552 nanos: 154924300 } owner: \"featureformer\" provider: \"postgres-quickstart\" trainingsets { name: \"fraud_training\" variant: \"quickstart\" } columns { entity: \"customerid\" value: \"isfraud\" } ``` Args: name (str): Name of label to be retrieved variant (str): Name of variant of label Returns: label (Union[label, LabelVariant]): Label or LabelVariant \"\"\" if not variant : return GetResource ( self . _stub , \"label\" , name ) return GetLabelVariant ( self . _stub , name , variant )","title":"get_label()"},{"location":"resource_client/#src.featureform.register.Client.get_model","text":"Get a model. Prints out information on model, and all resources associated with the model. Parameters: Name Type Description Default name str Name of model to be retrieved required Returns: Name Type Description model Model Model Source code in src\\featureform\\register.py 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 def get_model ( self , name ): \"\"\"Get a model. Prints out information on model, and all resources associated with the model. Args: name (str): Name of model to be retrieved Returns: model (Model): Model \"\"\" return GetResource ( self . _stub , \"model\" , name )","title":"get_model()"},{"location":"resource_client/#src.featureform.register.Client.get_provider","text":"Get a provider. Prints out information on provider, and all resources associated with the provider. Examples: Input postgres = rc . get_provider ( \"postgres-quickstart\" ) Output // get_provider prints out formatted information on provider NAME : pos t gres - quicks tart DESCRIPTION : A Pos t gres deployme nt we crea te d f or t he Fea turef orm quicks tart TYPE : POSTGRES_OFFLINE SOFTWARE : pos t gres STATUS : NO_STATUS ----------------------------------------------- SOURCES : NAME VARIANT transa c t io ns kaggle average_user_ transa c t io n quicks tart ----------------------------------------------- FEATURES : NAME VARIANT ----------------------------------------------- LABELS : NAME VARIANT frau dule nt quicks tart ----------------------------------------------- TRAINING SETS : NAME VARIANT frau d_ tra i n i n g quicks tart ----------------------------------------------- Input print ( postgres ) Output // get_provider returns the Provider object na me : \"postgres-quickstart\" descrip t io n : \"A Postgres deployment we created for the Featureform quickstart\" t ype : \"POSTGRES_OFFLINE\" so ft ware : \"postgres\" serialized_co nf ig : \"{\" Hos t \": \" quicks tart - pos t gres \", \" Por t \": \" 5432 \", \" User na me \": \" pos t gres \", \" Password \": \" password \", \" Da ta base \": \" pos t gres \"}\" sources { na me : \"transactions\" varia nt : \"kaggle\" } sources { na me : \"average_user_transaction\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } Parameters: Name Type Description Default name str Name of provider to be retrieved required Returns: Name Type Description provider Provider Provider Source code in src\\featureform\\register.py 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 def get_provider ( self , name ): \"\"\"Get a provider. Prints out information on provider, and all resources associated with the provider. **Examples:** ``` py title=\"Input\" postgres = rc.get_provider(\"postgres-quickstart\") ``` ``` json title=\"Output\" // get_provider prints out formatted information on provider NAME: postgres-quickstart DESCRIPTION: A Postgres deployment we created for the Featureform quickstart TYPE: POSTGRES_OFFLINE SOFTWARE: postgres STATUS: NO_STATUS ----------------------------------------------- SOURCES: NAME VARIANT transactions kaggle average_user_transaction quickstart ----------------------------------------------- FEATURES: NAME VARIANT ----------------------------------------------- LABELS: NAME VARIANT fraudulent quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(postgres) ``` ``` json title=\"Output\" // get_provider returns the Provider object name: \"postgres-quickstart\" description: \"A Postgres deployment we created for the Featureform quickstart\" type: \"POSTGRES_OFFLINE\" software: \"postgres\" serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\" sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } ``` Args: name (str): Name of provider to be retrieved Returns: provider (Provider): Provider \"\"\" return GetProvider ( self . _stub , name )","title":"get_provider()"},{"location":"resource_client/#src.featureform.register.Client.get_source","text":"Get a source. Prints out information on source, and all variants associated with the source. If variant is included, print information on that specific variant and all resources associated with it. Examples: Input transactions = rc . get_transactions ( \"transactions\" ) Output // get_source prints out formatted information on source NAME : transa c t io ns STATUS : NO_STATUS ----------------------------------------------- VARIANTS : kaggle de fault ----------------------------------------------- Input print ( transactions ) Output // get_source returns the Source object na me : \"transactions\" de fault _varia nt : \"kaggle\" varia nts : \"kaggle\" Input transactions_variant = rc . get_source ( \"transactions\" , \"kaggle\" ) Output // get_source with variant provided prints out formatted information on source variant NAME : transa c t io ns VARIANT : kaggle OWNER : featuref ormer DESCRIPTION : Fraud Da taset From Kaggle PROVIDER : pos t gres - quicks tart STATUS : NO_STATUS ----------------------------------------------- DEFINITION : TRANSFORMATION ----------------------------------------------- SOURCES NAME VARIANT ----------------------------------------------- PRIMARY DATA Tra nsa c t io ns FEATURES : NAME VARIANT ----------------------------------------------- LABELS : NAME VARIANT frau dule nt quicks tart ----------------------------------------------- TRAINING SETS : NAME VARIANT frau d_ tra i n i n g quicks tart ----------------------------------------------- Input print ( transactions_variant ) Output // get_source returns the SourceVariant object na me : \"transactions\" varia nt : \"kaggle\" ow ner : \"featureformer\" descrip t io n : \"Fraud Dataset From Kaggle\" provider : \"postgres-quickstart\" crea te d { seco n ds : 1658168552 nan os : 128768000 } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } primaryDa ta { ta ble { na me : \"Transactions\" } } Parameters: Name Type Description Default name str Name of source to be retrieved required variant str Name of variant of source None Returns: Name Type Description source Union [ Source , SourceVariant ] Source or SourceVariant Source code in src\\featureform\\register.py 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 def get_source ( self , name , variant = None ): \"\"\"Get a source. Prints out information on source, and all variants associated with the source. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" transactions = rc.get_transactions(\"transactions\") ``` ``` json title=\"Output\" // get_source prints out formatted information on source NAME: transactions STATUS: NO_STATUS ----------------------------------------------- VARIANTS: kaggle default ----------------------------------------------- ``` ``` py title=\"Input\" print(transactions) ``` ``` json title=\"Output\" // get_source returns the Source object name: \"transactions\" default_variant: \"kaggle\" variants: \"kaggle\" ``` ``` py title=\"Input\" transactions_variant = rc.get_source(\"transactions\", \"kaggle\") ``` ``` json title=\"Output\" // get_source with variant provided prints out formatted information on source variant NAME: transactions VARIANT: kaggle OWNER: featureformer DESCRIPTION: Fraud Dataset From Kaggle PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- DEFINITION: TRANSFORMATION ----------------------------------------------- SOURCES NAME VARIANT ----------------------------------------------- PRIMARY DATA Transactions FEATURES: NAME VARIANT ----------------------------------------------- LABELS: NAME VARIANT fraudulent quickstart ----------------------------------------------- TRAINING SETS: NAME VARIANT fraud_training quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(transactions_variant) ``` ``` json title=\"Output\" // get_source returns the SourceVariant object name: \"transactions\" variant: \"kaggle\" owner: \"featureformer\" description: \"Fraud Dataset From Kaggle\" provider: \"postgres-quickstart\" created { seconds: 1658168552 nanos: 128768000 } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } primaryData { table { name: \"Transactions\" } } ``` Args: name (str): Name of source to be retrieved variant (str): Name of variant of source Returns: source (Union[Source, SourceVariant]): Source or SourceVariant \"\"\" if not variant : return GetResource ( self . _stub , \"source\" , name ) return GetSourceVariant ( self . _stub , name , variant )","title":"get_source()"},{"location":"resource_client/#src.featureform.register.Client.get_training_set","text":"Get a training set. Prints out information on training set, and all variants associated with the training set. If variant is included, print information on that specific variant and all resources associated with it. Examples: Input fraud_training = rc . get_training_set ( \"fraud_training\" ) Output // get_training_set prints out formatted information on training set NAME : frau d_ tra i n i n g STATUS : NO_STATUS ----------------------------------------------- VARIANTS : quicks tart de fault ----------------------------------------------- Input print ( fraud_training ) Output // get_training_set returns the TrainingSet object na me : \"fraud_training\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" Input fraudulent_variant = ff . get_training set ( \"fraudulent\" , \"quickstart\" ) Output // get_training_set with variant provided prints out formatted information on training set variant NAME : frau d_ tra i n i n g VARIANT : quicks tart OWNER : featuref ormer PROVIDER : pos t gres - quicks tart STATUS : NO_STATUS ----------------------------------------------- LABEL : NAME VARIANT frau dule nt quicks tart ----------------------------------------------- FEATURES : NAME VARIANT avg_ transa c t io ns quicks tart ----------------------------------------------- Input print ( fraudulent_variant ) Output // get_training_set returns the TrainingSetVariant object na me : \"fraud_training\" varia nt : \"quickstart\" ow ner : \"featureformer\" crea te d { seco n ds : 1658168552 nan os : 157934800 } provider : \"postgres-quickstart\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } label { na me : \"fraudulent\" varia nt : \"quickstart\" } Parameters: Name Type Description Default name str Name of training set to be retrieved required variant str Name of variant of training set None Returns: Name Type Description training_set Union [ TrainingSet , TrainingSetVariant ] TrainingSet or TrainingSetVariant Source code in src\\featureform\\register.py 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 def get_training_set ( self , name , variant = None ): \"\"\"Get a training set. Prints out information on training set, and all variants associated with the training set. If variant is included, print information on that specific variant and all resources associated with it. **Examples:** ``` py title=\"Input\" fraud_training = rc.get_training_set(\"fraud_training\") ``` ``` json title=\"Output\" // get_training_set prints out formatted information on training set NAME: fraud_training STATUS: NO_STATUS ----------------------------------------------- VARIANTS: quickstart default ----------------------------------------------- ``` ``` py title=\"Input\" print(fraud_training) ``` ``` json title=\"Output\" // get_training_set returns the TrainingSet object name: \"fraud_training\" default_variant: \"quickstart\" variants: \"quickstart\" ``` ``` py title=\"Input\" fraudulent_variant = ff.get_training set(\"fraudulent\", \"quickstart\") ``` ``` json title=\"Output\" // get_training_set with variant provided prints out formatted information on training set variant NAME: fraud_training VARIANT: quickstart OWNER: featureformer PROVIDER: postgres-quickstart STATUS: NO_STATUS ----------------------------------------------- LABEL: NAME VARIANT fraudulent quickstart ----------------------------------------------- FEATURES: NAME VARIANT avg_transactions quickstart ----------------------------------------------- ``` ``` py title=\"Input\" print(fraudulent_variant) ``` ``` json title=\"Output\" // get_training_set returns the TrainingSetVariant object name: \"fraud_training\" variant: \"quickstart\" owner: \"featureformer\" created { seconds: 1658168552 nanos: 157934800 } provider: \"postgres-quickstart\" features { name: \"avg_transactions\" variant: \"quickstart\" } label { name: \"fraudulent\" variant: \"quickstart\" } ``` Args: name (str): Name of training set to be retrieved variant (str): Name of variant of training set Returns: training_set (Union[TrainingSet, TrainingSetVariant]): TrainingSet or TrainingSetVariant \"\"\" if not variant : return GetResource ( self . _stub , \"training-set\" , name ) return GetTrainingSetVariant ( self . _stub , name , variant )","title":"get_training_set()"},{"location":"resource_client/#src.featureform.register.Client.get_user","text":"Get a user. Prints out name of user, and all resources associated with the user. Examples: Input featureformer = rc . get_user ( \"featureformer\" ) Output // get_user prints out formatted information on user USER NAME : featuref ormer ----------------------------------------------- NAME VARIANT TYPE avg_ transa c t io ns quicks tart feature frau dule nt quicks tart label frau d_ tra i n i n g quicks tart tra i n i n g se t transa c t io ns kaggle source average_user_ transa c t io n quicks tart source ----------------------------------------------- Input print ( featureformer ) Output // get_user returns the User object na me : \"featureformer\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } sources { na me : \"transactions\" varia nt : \"kaggle\" } sources { na me : \"average_user_transaction\" varia nt : \"quickstart\" } Parameters: Name Type Description Default name str Name of user to be retrieved required Returns: Name Type Description user User User Source code in src\\featureform\\register.py 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 def get_user ( self , name ): \"\"\"Get a user. Prints out name of user, and all resources associated with the user. **Examples:** ``` py title=\"Input\" featureformer = rc.get_user(\"featureformer\") ``` ``` json title=\"Output\" // get_user prints out formatted information on user USER NAME: featureformer ----------------------------------------------- NAME VARIANT TYPE avg_transactions quickstart feature fraudulent quickstart label fraud_training quickstart training set transactions kaggle source average_user_transaction quickstart source ----------------------------------------------- ``` ``` py title=\"Input\" print(featureformer) ``` ``` json title=\"Output\" // get_user returns the User object name: \"featureformer\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } ``` Args: name (str): Name of user to be retrieved Returns: user (User): User \"\"\" return GetUser ( self . _stub , name )","title":"get_user()"},{"location":"resource_client/#src.featureform.register.Client.list_entities","text":"List all entities. Prints a list of all entities. Examples: Input entities = rc . list_entities () Output // list_entities prints out formatted information on all entities NAME STATUS user CREATED transa c t io n CREATED Input print ( features_list ) Output // list_entities returns a list of Entity objects [ na me : \"user\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } features { na me : \"avg_transactions\" varia nt : \"production\" } features { na me : \"user_age\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } , na me : \"transaction\" features { na me : \"amount_spent\" varia nt : \"production\" } ] Returns: Name Type Description entities List [ Entity ] List of Entity Objects Source code in src\\featureform\\register.py 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 def list_entities ( self ): \"\"\"List all entities. Prints a list of all entities. **Examples:** ``` py title=\"Input\" entities = rc.list_entities() ``` ``` json title=\"Output\" // list_entities prints out formatted information on all entities NAME STATUS user CREATED transaction CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_entities returns a list of Entity objects [name: \"user\" features { name: \"avg_transactions\" variant: \"quickstart\" } features { name: \"avg_transactions\" variant: \"production\" } features { name: \"user_age\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } , name: \"transaction\" features { name: \"amount_spent\" variant: \"production\" } ] ``` Returns: entities (List[Entity]): List of Entity Objects \"\"\" return ListNameStatus ( self . _stub , \"entity\" )","title":"list_entities()"},{"location":"resource_client/#src.featureform.register.Client.list_features","text":"List all features. Examples: Input features_list = rc . list_features () Output // list_features prints out formatted information on all features NAME VARIANT STATUS user_age quicks tart (de fault ) READY avg_ transa c t io ns quicks tart (de fault ) READY avg_ transa c t io ns produc t io n CREATED Input print ( features_list ) Output // list_features returns a list of Feature objects [ na me : \"user_age\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" , na me : \"avg_transactions\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" varia nts : \"production\" ] Returns: Name Type Description features List [ Feature ] List of Feature Objects Source code in src\\featureform\\register.py 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 def list_features ( self ): \"\"\"List all features. **Examples:** ``` py title=\"Input\" features_list = rc.list_features() ``` ``` json title=\"Output\" // list_features prints out formatted information on all features NAME VARIANT STATUS user_age quickstart (default) READY avg_transactions quickstart (default) READY avg_transactions production CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"user_age\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" variants: \"production\" ] ``` Returns: features (List[Feature]): List of Feature Objects \"\"\" return ListNameVariantStatus ( self . _stub , \"feature\" )","title":"list_features()"},{"location":"resource_client/#src.featureform.register.Client.list_labels","text":"List all labels. Examples: Input features_list = rc . list_labels () Output // list_labels prints out formatted information on all labels NAME VARIANT STATUS user_age quicks tart (de fault ) READY avg_ transa c t io ns quicks tart (de fault ) READY avg_ transa c t io ns produc t io n CREATED Input print ( label_list ) Output // list_features returns a list of Feature objects [ na me : \"user_age\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" , na me : \"avg_transactions\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" varia nts : \"production\" ] Returns: Name Type Description labels List [ Label ] List of Label Objects Source code in src\\featureform\\register.py 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 def list_labels ( self ): \"\"\"List all labels. **Examples:** ``` py title=\"Input\" features_list = rc.list_labels() ``` ``` json title=\"Output\" // list_labels prints out formatted information on all labels NAME VARIANT STATUS user_age quickstart (default) READY avg_transactions quickstart (default) READY avg_transactions production CREATED ``` ``` py title=\"Input\" print(label_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"user_age\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"avg_transactions\" default_variant: \"quickstart\" variants: \"quickstart\" variants: \"production\" ] ``` Returns: labels (List[Label]): List of Label Objects \"\"\" return ListNameVariantStatus ( self . _stub , \"label\" )","title":"list_labels()"},{"location":"resource_client/#src.featureform.register.Client.list_models","text":"List all models. Prints a list of all models. Returns: Name Type Description models List [ Model ] List of Model Objects Source code in src\\featureform\\register.py 2131 2132 2133 2134 2135 2136 2137 def list_models ( self ): \"\"\"List all models. Prints a list of all models. Returns: models (List[Model]): List of Model Objects \"\"\" return ListNameStatusDesc ( self . _stub , \"model\" )","title":"list_models()"},{"location":"resource_client/#src.featureform.register.Client.list_providers","text":"List all providers. Prints a list of all providers. Examples: Input providers_list = rc . list_providers () Output // list_providers prints out formatted information on all providers NAME STATUS DESCRIPTION redis - quicks tart CREATED A Redis deployme nt we crea te d f or t he Fea turef orm quicks tart pos t gres - quicks tart CREATED A Pos t gres deployme nt we crea te d f or t he Fea turef orm quicks t Input print ( providers_list ) Output // list_providers returns a list of Providers objects [ na me : \"redis-quickstart\" descrip t io n : \"A Redis deployment we created for the Featureform quickstart\" t ype : \"REDIS_ONLINE\" so ft ware : \"redis\" serialized_co nf ig : \"{\" Addr \": \" quicks tart - redis : 6379 \", \" Password \": \"\", \" DB \": 0}\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } features { na me : \"avg_transactions\" varia nt : \"production\" } features { na me : \"user_age\" varia nt : \"quickstart\" } , na me : \"postgres-quickstart\" descrip t io n : \"A Postgres deployment we created for the Featureform quickstart\" t ype : \"POSTGRES_OFFLINE\" so ft ware : \"postgres\" serialized_co nf ig : \"{\" Hos t \": \" quicks tart - pos t gres \", \" Por t \": \" 5432 \", \" User na me \": \" pos t gres \", \" Password \": \" password \", \" Da ta base \": \" pos t gres \"}\" sources { na me : \"transactions\" varia nt : \"kaggle\" } sources { na me : \"average_user_transaction\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } ] Returns: Name Type Description providers List [ Provider ] List of Provider Objects Source code in src\\featureform\\register.py 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 def list_providers ( self ): \"\"\"List all providers. Prints a list of all providers. **Examples:** ``` py title=\"Input\" providers_list = rc.list_providers() ``` ``` json title=\"Output\" // list_providers prints out formatted information on all providers NAME STATUS DESCRIPTION redis-quickstart CREATED A Redis deployment we created for the Featureform quickstart postgres-quickstart CREATED A Postgres deployment we created for the Featureform quickst ``` ``` py title=\"Input\" print(providers_list) ``` ``` json title=\"Output\" // list_providers returns a list of Providers objects [name: \"redis-quickstart\" description: \"A Redis deployment we created for the Featureform quickstart\" type: \"REDIS_ONLINE\" software: \"redis\" serialized_config: \"{\\\"Addr\\\": \\\"quickstart-redis:6379\\\", \\\"Password\\\": \\\"\\\", \\\"DB\\\": 0}\" features { name: \"avg_transactions\" variant: \"quickstart\" } features { name: \"avg_transactions\" variant: \"production\" } features { name: \"user_age\" variant: \"quickstart\" } , name: \"postgres-quickstart\" description: \"A Postgres deployment we created for the Featureform quickstart\" type: \"POSTGRES_OFFLINE\" software: \"postgres\" serialized_config: \"{\\\"Host\\\": \\\"quickstart-postgres\\\", \\\"Port\\\": \\\"5432\\\", \\\"Username\\\": \\\"postgres\\\", \\\"Password\\\": \\\"password\\\", \\\"Database\\\": \\\"postgres\\\"}\" sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } ] ``` Returns: providers (List[Provider]): List of Provider Objects \"\"\" return ListNameStatusDesc ( self . _stub , \"provider\" )","title":"list_providers()"},{"location":"resource_client/#src.featureform.register.Client.list_sources","text":"List all sources. Prints a list of all sources. Examples: Input sources_list = rc . list_sources () Output // list_sources prints out formatted information on all sources NAME VARIANT STATUS DESCRIPTION average_user_ transa c t io n quicks tart (de fault ) NO_STATUS t he average transa c t io n amou nt f or a user transa c t io ns kaggle (de fault ) NO_STATUS Fraud Da taset From Kaggle Input print ( sources_list ) Output // list_sources returns a list of Source objects [ na me : \"average_user_transaction\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" , na me : \"transactions\" de fault _varia nt : \"kaggle\" varia nts : \"kaggle\" ] Returns: Name Type Description sources List [ Source ] List of Source Objects Source code in src\\featureform\\register.py 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 def list_sources ( self ): \"\"\"List all sources. Prints a list of all sources. **Examples:** ``` py title=\"Input\" sources_list = rc.list_sources() ``` ``` json title=\"Output\" // list_sources prints out formatted information on all sources NAME VARIANT STATUS DESCRIPTION average_user_transaction quickstart (default) NO_STATUS the average transaction amount for a user transactions kaggle (default) NO_STATUS Fraud Dataset From Kaggle ``` ``` py title=\"Input\" print(sources_list) ``` ``` json title=\"Output\" // list_sources returns a list of Source objects [name: \"average_user_transaction\" default_variant: \"quickstart\" variants: \"quickstart\" , name: \"transactions\" default_variant: \"kaggle\" variants: \"kaggle\" ] ``` Returns: sources (List[Source]): List of Source Objects \"\"\" return ListNameVariantStatusDesc ( self . _stub , \"source\" )","title":"list_sources()"},{"location":"resource_client/#src.featureform.register.Client.list_training_sets","text":"List all training sets. Prints a list of all training sets. Examples: Input training_sets_list = rc . list_training_sets () Output // list_training_sets prints out formatted information on all training sets NAME VARIANT STATUS DESCRIPTION frau d_ tra i n i n g quicks tart (de fault ) READY Trai n i n g se t f or frau d de te c t io n . frau d_ tra i n i n g v 2 CREATED Improved tra i n i n g se t f or frau d de te c t io n . recomme n der v 1 (de fault ) CREATED Trai n i n g se t f or recomme n der sys te m. Input print ( training_sets_list ) Output // list_training_sets returns a list of TrainingSet objects [ na me : \"fraud_training\" de fault _varia nt : \"quickstart\" varia nts : \"quickstart\" , \"v2\" , na me : \"recommender\" de fault _varia nt : \"v1\" varia nts : \"v1\" ] Returns: Name Type Description training_sets List [ TrainingSet ] List of TrainingSet Objects Source code in src\\featureform\\register.py 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 def list_training_sets ( self ): \"\"\"List all training sets. Prints a list of all training sets. **Examples:** ``` py title=\"Input\" training_sets_list = rc.list_training_sets() ``` ``` json title=\"Output\" // list_training_sets prints out formatted information on all training sets NAME VARIANT STATUS DESCRIPTION fraud_training quickstart (default) READY Training set for fraud detection. fraud_training v2 CREATED Improved training set for fraud detection. recommender v1 (default) CREATED Training set for recommender system. ``` ``` py title=\"Input\" print(training_sets_list) ``` ``` json title=\"Output\" // list_training_sets returns a list of TrainingSet objects [name: \"fraud_training\" default_variant: \"quickstart\" variants: \"quickstart\", \"v2\", name: \"recommender\" default_variant: \"v1\" variants: \"v1\" ] ``` Returns: training_sets (List[TrainingSet]): List of TrainingSet Objects \"\"\" return ListNameVariantStatusDesc ( self . _stub , \"training-set\" )","title":"list_training_sets()"},{"location":"resource_client/#src.featureform.register.Client.list_users","text":"List all users. Prints a list of all users. Examples: Input users_list = rc . list_users () Output // list_users prints out formatted information on all users NAME STATUS featuref ormer NO_STATUS featuref ormers_ fr ie n d CREATED Input print ( features_list ) Output // list_features returns a list of Feature objects [ na me : \"featureformer\" features { na me : \"avg_transactions\" varia nt : \"quickstart\" } labels { na me : \"fraudulent\" varia nt : \"quickstart\" } tra i n i n gse ts { na me : \"fraud_training\" varia nt : \"quickstart\" } sources { na me : \"transactions\" varia nt : \"kaggle\" } sources { na me : \"average_user_transaction\" varia nt : \"quickstart\" }, na me : \"featureformers_friend\" features { na me : \"user_age\" varia nt : \"production\" } sources { na me : \"user_profiles\" varia nt : \"production\" } ] Returns: Name Type Description users List [ User ] List of User Objects Source code in src\\featureform\\register.py 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 def list_users ( self ): \"\"\"List all users. Prints a list of all users. **Examples:** ``` py title=\"Input\" users_list = rc.list_users() ``` ``` json title=\"Output\" // list_users prints out formatted information on all users NAME STATUS featureformer NO_STATUS featureformers_friend CREATED ``` ``` py title=\"Input\" print(features_list) ``` ``` json title=\"Output\" // list_features returns a list of Feature objects [name: \"featureformer\" features { name: \"avg_transactions\" variant: \"quickstart\" } labels { name: \"fraudulent\" variant: \"quickstart\" } trainingsets { name: \"fraud_training\" variant: \"quickstart\" } sources { name: \"transactions\" variant: \"kaggle\" } sources { name: \"average_user_transaction\" variant: \"quickstart\" }, name: \"featureformers_friend\" features { name: \"user_age\" variant: \"production\" } sources { name: \"user_profiles\" variant: \"production\" } ] ``` Returns: users (List[User]): List of User Objects \"\"\" return ListNameStatus ( self . _stub , \"user\" )","title":"list_users()"}]}